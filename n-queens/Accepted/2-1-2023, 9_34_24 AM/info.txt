{"id":889162017,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1675224264,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/889162017/","is_pending":"Not Pending","title":"N-Queens","memory":"45.6 MB","code":"class Solution {\npublic:\n    bool isSafe(vector<string> board, int n, int row, int col) {\n        // check for row safety\n        for(int i=0; i<row; i++) {\n            if(board[i][col] == 'Q') return false;\n        }\n        // check for column safety\n        for(int i=0; i<col; i++) {\n            if(board[row][i] == 'Q') return false;\n        }\n        // check for diagonal safety\n        // left upper diagonal\n        for(int i=row, j=col; i>=0 && j>=0; i--, j--) {\n            if(board[i][j] == 'Q') return false;\n        }\n\n        // right upper diagonal\n        for(int i=row, j=col; i>=0 && j<n; i--, j++) {\n            if(board[i][j] == 'Q') return false;\n        }\n\n        return true;\n    }\n\n    void solve(int n, vector<vector<string>>& ans, vector<string>& board, int row) {\n        if(row == n) {\n            ans.push_back(board);\n            return;\n        }\n\n        for(int col = 0; col < n; col++) {\n            if(isSafe(board, n, row, col)) {\n                board[row][col] = 'Q';\n                solve(n, ans, board, row+1);\n                board[row][col] = '.';\n            }\n        }\n    }\n\n    vector<vector<string>> solveNQueens(int n) {\n        vector<vector<string>> ans;\n        vector<string> board(n);\n        string empty(n, '.');\n\n        for(int i=0; i<n; i++) {\n            board[i] = empty;\n        }\n\n        solve(n, ans, board, 0);\n        return ans;\n    }\n};","compare_result":"111111111","title_slug":"n-queens","has_notes":false}