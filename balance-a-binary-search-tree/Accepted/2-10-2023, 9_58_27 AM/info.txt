{"id":895112199,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1676003307,"status":10,"status_display":"Accepted","runtime":"146 ms","url":"/submissions/detail/895112199/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"63.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root, vector<int>& in) {\n        if(root == NULL) return;\n        inorder(root->left, in);\n        in.push_back(root->val);\n        inorder(root->right, in);\n    }\n\n    TreeNode* inorderToBST(int s, int e, vector<int>& in) {\n        if(s > e) return NULL;\n\n        int mid = (s + e) / 2;\n        TreeNode* root = new TreeNode(in[mid]);\n        root->left = inorderToBST(s,mid-1,in);\n        root->right = inorderToBST(mid+1,e,in);\n        return root;\n    }\n\n    TreeNode* balanceBST(TreeNode* root) {\n        vector<int> in;\n        inorder(root, in);\n        return inorderToBST(0, in.size()-1, in);\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false}