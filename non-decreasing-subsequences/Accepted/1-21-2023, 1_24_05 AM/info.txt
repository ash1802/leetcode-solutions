{"id":882024802,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674244445,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/882024802/","is_pending":"Not Pending","title":"Non-decreasing Subsequences","memory":"22.3 MB","code":"class Solution {\n    void solve(vector<int>& nums, vector<int>& sequence, set<vector<int>>& result, int i) {\n        // if we have checked all elements\n        if (i == nums.size()) {\n            if (sequence.size() >= 2) result.insert(sequence);\n            return;\n        }\n\n        // if the sequence remains increasing after appending nums[index]\n        if (sequence.empty() || sequence.back() <= nums[i]) {\n            // append nums[index] to the sequence\n            sequence.push_back(nums[i]);\n            // call recursively\n            solve(nums, sequence, result, i+1);\n            // delete nums[index] from the end of the sequence\n            sequence.pop_back();\n        }\n\n        // call recursively not appending an element\n        solve(nums, sequence, result, i+1);\n    }\n\npublic:\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n        set<vector<int>> result;\n        vector<int> sequence;\n        function<void(int)> backtrack;\n        solve(nums, sequence, result, 0);\n        return vector(result.begin(), result.end());\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-decreasing-subsequences","has_notes":false}