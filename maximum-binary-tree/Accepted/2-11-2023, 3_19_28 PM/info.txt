{"id":895837546,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1676108968,"status":10,"status_display":"Accepted","runtime":"226 ms","url":"/submissions/detail/895837546/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"251 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass compare {\n    public: \n    bool operator()(pair<int,int>& a, pair<int,int>& b) {\n        return a.first < b.first;\n    }\n};\n\nclass Solution {\npublic:\n    int findIndex(vector<int> nums, int s, int e) {\n        priority_queue<pair<int,int>, vector<pair<int,int>>, compare> pq;\n        for(int i=s; i<=e; i++) pq.push({nums[i],i});\n        return pq.top().second;\n    }\n\n    TreeNode* buildTree(vector<int>& nums, int s, int e) {\n        if(s > e) return NULL;\n        int idx = findIndex(nums, s, e);\n        TreeNode* root = new TreeNode(nums[idx]);\n        root->left = buildTree(nums, s, idx-1);\n        root->right = buildTree(nums, idx+1, e);\n        return root;\n    }\n\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        int s = 0;\n        int e = nums.size()-1;\n        return buildTree(nums, s, e);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false}