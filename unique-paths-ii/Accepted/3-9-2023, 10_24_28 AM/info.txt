{"id":911855219,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678337668,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/911855219/","is_pending":"Not Pending","title":"Unique Paths II","memory":"7.9 MB","code":"class Solution {\npublic:\n    int solve(vector<vector<int>>& obstacleGrid, int i, int j, vector<vector<int>>& dp) {\n        if(i == 0 && j == 0 && obstacleGrid[i][j] == 0) return 1;\n        if(i < 0 || j < 0) return 0;\n        if(dp[i][j] != -1) return dp[i][j];\n        // we can proceed only when the current cell does not have any obstacle\n        if(obstacleGrid[i][j] == 0) {\n            int up = solve(obstacleGrid, i, j-1, dp);\n            int left = solve(obstacleGrid, i-1, j, dp);\n            return dp[i][j] = up + left;\n        }\n        // otherwise we found an obstacle so we return 0 as the answer\n        else return 0;\n    }\n\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        vector<vector<int>> dp(m, vector<int>(n, -1));\n        return solve(obstacleGrid, m-1, n-1, dp);\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false}