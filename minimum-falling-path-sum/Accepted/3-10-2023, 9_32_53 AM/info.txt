{"id":912450507,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678420973,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/912450507/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"10.3 MB","code":"class Solution {\npublic:\n    // memoization + recursion solution here\n    int solve(vector<vector<int>>& matrix, int row, int col, vector<vector<int>>& dp) {\n        // need to check for valid column first otherwise the next line\n        // will throw an error because col value might be an invalid index\n        if(col  < 0 || col >= matrix[0].size()) return 1e9;\n        if(row == 0) return matrix[0][col];\n\n        if(dp[row][col] != -1) return dp[row][col];\n\n        int left, up, right;\n\n        left = matrix[row][col] + solve(matrix, row-1, col-1, dp);\n        up = matrix[row][col] + solve(matrix, row-1, col, dp);\n        right = matrix[row][col] + solve(matrix, row-1, col+1, dp);\n\n        return dp[row][col] = min(left, min(up, right));\n    }\n\n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<vector<int>> dp(m, vector<int>(n, -1));\n        \n        int ans = INT_MAX;\n        for(int col = 0; col<n; col++) {\n            ans = min(ans, solve(matrix, m-1, col, dp));\n        }\n\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false}