{"id":886358887,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1674836220,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/886358887/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"359.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* buildTree(vector<int> nums, int start, int end) {\n        if(start > end) return NULL;\n\n        int mid = start + (end-start)/2;\n        TreeNode* root = new TreeNode(nums[mid]);\n        root->left = buildTree(nums,start,mid-1);\n        root->right = buildTree(nums,mid+1,end);\n        return root;\n    }\n\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        vector<int> nums;\n\n        while(head != NULL) {\n            nums.push_back(head->val);\n            head = head->next;\n        }\n\n        TreeNode* root = buildTree(nums, 0, nums.size()-1);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false}