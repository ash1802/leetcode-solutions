{"id":922313928,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1679819197,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/922313928/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"N/A","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    bool solve(string s, string p, int i, int j, vector<vector<int>>& dp) {\n        // base cases\n        if(j < 0 && i < 0) return true;\n        if(j < 0 && i >= 0) return false;\n        if(i < 0 && j >= 0) {\n            for(int k = 0; k<=j; k++) {\n                if(p[k] != '*') return false;\n            }\n            return true;\n        }\n        \n        if(dp[i][j] != -1) return dp[i][j];\n\n        if(s[i] == p[j] || p[j] == '?') {\n            return dp[i][j] = solve(s,p,i-1,j-1,dp);\n        }\n\n        if(p[j] == '*') {\n            return dp[i][j] = solve(s, p, i, j-1,dp) || solve(s, p, i-1, j,dp);\n        }\n\n        return dp[i][j] = false;\n    }\n\n    bool isMatch(string s, string p) {\n        int n = s.size();\n        int m = p.size();\n        vector<vector<int>> dp(n, vector<int>(m, -1));\n        return solve(s, p, n-1, m-1,dp);\n    }\n};","compare_resulttitle_slug":"wildcard-matching","has_notes":false}