{"id":922354108,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1679824739,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/922354108/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"13.2 MB","code":"class Solution {\npublic:\n    bool allStars(string s, int end) {\n        for(int i=1; i<=end; i++) {\n            if(s[i-1] != '*') return false;\n        }\n        return true;\n    }\n\n    // recursion + memoization solution here\n    bool solve(string p, string s, int i, int j, vector<vector<int>>& dp) {\n        // base cases\n        if(i < 0 && j < 0) return true;\n        if(i < 0 && j >= 0) return false;\n        if(j < 0 && i >= 0) {\n            for(int k = 0; k<=i; k++) {\n                if(p[k] != '*') return false;\n            }\n            return true;\n        }\n        \n        if(dp[i][j] != -1) return dp[i][j];\n\n        if(p[i] == s[j] || p[i] == '?') {\n            return dp[i][j] = solve(p, s, i-1, j-1, dp);\n        }\n\n        if(p[i] == '*') {\n            return dp[i][j] = solve(p, s, i, j-1,dp) || solve(p, s, i-1, j,dp);\n        }\n\n        return dp[i][j] = false;\n    }\n\n    bool isMatch(string s, string p) {\n        int n = p.size();\n        int m = s.size();\n        // vector<vector<int>> dp(n, vector<int>(m, -1));\n        // return solve(p, s, n-1, m-1,dp);\n\n        // tabulation solution here\n        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));\n        dp[0][0] = true;\n        for(int j=1; j<=m; j++) dp[0][j] = false;\n        for(int i=1; i<=n; i++) dp[i][0] = allStars(p, i);\n\n        for(int i=1; i<=n; i++) {\n            for(int j=1; j<=m; j++) {\n                if(p[i-1] == s[j-1] || p[i-1] == '?') {\n                    dp[i][j] = dp[i-1][j-1];\n                }\n                else {\n                    if(p[i-1] == '*') dp[i][j] = dp[i][j-1] || dp[i-1][j];\n                    else dp[i][j] = false;  \n                }\n            }\n        }\n\n        return dp[n][m];\n\n        // space optimised solution here\n        vector<bool> prev(m+1, false);\n        vector<bool> curr(m+1, false);\n\n        prev[0] = true;\n        for(int j=1; j<=m; j++) prev[j] = false;\n\n        for(int i=1; i<=n; i++) {\n            curr[0] = allStars(p, i);\n            for(int j=1; j<=m; j++) {\n                if(p[i-1] == s[j-1] || p[i-1] == '?') {\n                    curr[j] = prev[j-1];\n                }\n                else {\n                    if(p[i-1] == '*') curr[j] = curr[j-1] || prev[j];\n                    else curr[j] = false;  \n                }\n            }\n            prev = curr;\n        }\n\n        return prev[m];\n    }\n};","compare_resulttitle_slug":"wildcard-matching","has_notes":false}