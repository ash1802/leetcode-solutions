{"id":884600812,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674591078,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/884600812/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\n    \n// a faster way is to calculate both the height and diameter \n// during the recursion and return as a pair\n// first slot of the pair stores diameter, second slot of the pair stores height\n// takes O(n) time since only calls for calculating diameter are made\npair<int,int> diameterFast(TreeNode *root) {\n    // if NULL node means both height and diameter are zero\n    if(root == NULL) return make_pair(0,0);\n\n    // get the answers for the left and right sub-trees recursively\n    pair<int,int> left = diameterFast(root->left);\n    pair<int,int> right = diameterFast(root->right);\n\n    // case - 1 : only in left subtree\n    int a = left.first;\n    // case - 2 : only in right subtree\n    int b = right.first;\n    // case - 3 : lies in both\n    int c = left.second + right.second + 1;\n\n    pair<int,int> ans;\n    // calculate the diameter here (out of the three cases the maximum)\n    ans.first = max(max(a,b),c);\n    // also calculate the height of the subtree with current node as the root\n    ans.second = max(left.second,right.second) + 1;\n    return ans;\n}\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        pair<int,int> ans = diameterFast(root);\n        return ans.first - 1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false}