{"id":855093670,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1670255673,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/855093670/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int heightBST(TreeNode *root) {\n        if(root == NULL) return 0;\n        int lh = heightBST(root->left);\n        int rh = heightBST(root->right);\n        return max(lh, rh) + 1;\n    }\n\n    bool isBalanced(TreeNode* root) {\n        if(root == NULL) return true;\n\n        bool isLeft = isBalanced(root->left);\n        bool isRight = isBalanced(root->right);\n\n        bool isItself = abs(heightBST(root->left) - heightBST(root->right)) <= 1;\n\n        return isLeft && isRight && isItself;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false}