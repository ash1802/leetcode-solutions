{"id":885584177,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674728188,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/885584177/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* solve(vector<int> preorder, vector<int> inorder, int& index, int istart, int iend, unordered_map<int,int> mp) {\n        // base case\n        if(index >= preorder.size() || istart > iend) return NULL;\n\n        int element = preorder[index++];\n        \n        int pos = mp[element];\n\n        TreeNode* root = new TreeNode(element);\n        root->left = solve(preorder, inorder, index, istart, pos-1, mp);\n        root->right = solve(preorder, inorder, index, pos+1, iend, mp);\n        return root;\n    }\n\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int preOrderIndex = 0;\n        int n = preorder.size();\n        unordered_map<int,int> mp;\n\n        for(int i=0; i<inorder.size(); i++) mp[inorder[i]] = i;\n        \n        TreeNode* root = solve(preorder, inorder, preOrderIndex, 0, n-1, mp);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}