{"id":892038487,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1675605439,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/892038487/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"7.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root, vector<int>& in) {\n        if(root == NULL) return;\n        inorder(root->left, in);\n        in.push_back(root->val);\n        inorder(root->right, in);\n    }\n\n    TreeNode* increasingBST(TreeNode* root) {\n        if(!root->left && !root->right) return root;\n\n        vector<int> in;\n        inorder(root, in);\n        \n        TreeNode* newRoot = new TreeNode(-1);\n        TreeNode* temp = newRoot;\n\n        for(int num : in) {\n            temp->right = new TreeNode(num);\n            temp->left = NULL;\n            temp = temp->right;\n        }\n\n        return newRoot->right;\n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false}