{"id":888616395,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1675151368,"status":10,"status_display":"Accepted","runtime":"201 ms","url":"/submissions/detail/888616395/","is_pending":"Not Pending","title":"Best Team With No Conflicts","memory":"20 MB","code":"class Solution {\npublic:\n    int findMaxScore(vector<pair<int, int>>& ageScorePair) {\n        int n = (int) ageScorePair.size();\n        int answer = 0;\n        \n        vector<int> dp(n);\n        // Initially, the maximum score for each player will be equal to the individual scores.\n        for (int i = 0; i < n; i++) {\n            dp[i] = ageScorePair[i].second;\n            answer = max(answer, dp[i]);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i - 1; j >= 0; j--) {\n                // If the players j and i could be in the same team.\n                if (ageScorePair[i].second >= ageScorePair[j].second) {\n                    // Update the maximum score for the ith player.\n                    dp[i] = max(dp[i], ageScorePair[i].second + dp[j]);\n                }\n            }\n            // Maximum score among all the players.\n            answer = max(answer, dp[i]);\n        }\n        \n        return answer;\n    }\n    \n    int bestTeamScore(vector<int>& scores, vector<int>& ages) {\n        vector<pair<int, int>> ageScorePair;\n        for (int i = 0; i < scores.size(); i++) {\n            ageScorePair.push_back({ages[i], scores[i]});\n        }\n        \n        // Sort in ascending order of age and then by score.\n        sort(ageScorePair.begin(), ageScorePair.end());\n        return findMaxScore(ageScorePair);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-team-with-no-conflicts","has_notes":false}