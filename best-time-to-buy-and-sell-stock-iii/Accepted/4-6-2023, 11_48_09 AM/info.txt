{"id":928886592,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1680761889,"status":10,"status_display":"Accepted","runtime":"237 ms","url":"/submissions/detail/928886592/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock III","memory":"75.4 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int> prices, int i, bool buy, int cap, vector<vector<vector<int>>>& dp) {\n        // base cases\n        if(i == prices.size()) return 0;\n        if(cap == 2) return 0;\n        \n        if(dp[i][buy][cap] != -1) return dp[i][buy][cap];\n\n        int profit = 0;\n        if(buy) {\n            profit = max(-prices[i] + solve(prices, i+1, !buy, cap, dp), solve(prices, i+1, buy, cap, dp));\n        }\n\n        else {\n            profit = max(prices[i] + solve(prices, i+1, !buy, cap+1, dp), solve(prices, i+1, buy, cap, dp));\n        }\n\n        return dp[i][buy][cap] = profit;\n    }\n\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        // vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(2, -1)));\n        // return solve(prices, 0, true, 0, dp);\n\n        // tabulation solution here\n        // vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));\n\n        // for(int i = n-1; i>=0; i--) {\n        //     for(int buy = 0; buy <= 1; buy++) {\n        //         for(int cap = 1; cap <= 2; cap++) {\n        //             int profit = 0;\n        //             if(buy) {\n        //                 profit = max(-prices[i] + dp[i+1][0][cap], dp[i+1][1][cap]);\n        //             }\n\n        //             else {\n        //                 profit = max(prices[i] + dp[i+1][1][cap-1], dp[i+1][0][cap]);\n        //             }\n\n        //             dp[i][buy][cap] = profit;\n        //         }\n        //     }\n        // }\n\n        // return dp[0][1][2];\n\n        // space optimised solution here\n        vector<vector<int>> ahead(2,vector<int> (3,0));\n        vector<vector<int>> curr(2,vector<int> (3,0));\n\n        \n        for(int i = n-1; i>=0; i--) {\n            for(int buy = 0; buy <= 1; buy++) {\n                for(int cap = 1; cap <= 2; cap++) {\n                    int profit = 0;\n                    if(buy) {\n                        profit = max(-prices[i] + ahead[0][cap], ahead[1][cap]);\n                    }\n\n                    else {\n                        profit = max(prices[i] + ahead[1][cap-1], ahead[0][cap]);\n                    }\n\n                    curr[buy][cap] = profit;\n                }\n            }\n            ahead = curr;\n        }\n\n        return ahead[1][2];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-iii","has_notes":false}