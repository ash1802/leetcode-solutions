{"id":922299946,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1679817218,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/922299946/","is_pending":"Not Pending","title":"Edit Distance","memory":"6.5 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(string s, string t, int i, int j, vector<vector<int>>& dp) {\n        // base cases\n        if(i<0) return j+1;\n        if(j<0) return i+1;\n            \n        if(dp[i][j]!=-1) return dp[i][j];\n            \n        if(s[i]==t[j])\n            return dp[i][j] =  0 + solve(s,t,i-1,j-1,dp);\n            \n        // Minimum of three choices\n        else return dp[i][j] = 1 + min(solve(s,t,i-1,j-1,dp), min(solve(s,t,i-1,j,dp),solve(s,t,i,j-1,dp)));\n    }\n\n    int minDistance(string word1, string word2) {\n        int n = word1.size();\n        int m = word2.size();\n        // vector<vector<int>> dp(n, vector<int>(m, -1));\n        // return solve(word1, word2, n-1, m-1, dp);\n\n        // tabulation solution here\n        // vector<vector<int>> dp(n+1, vector<int>(m+1, 0));\n\n        // for(int i=0; i<=n; i++) dp[i][0] = i;\n        // for(int j=0; j<=m; j++) dp[0][j] = j;\n\n        // for(int i=1; i<=n; i++) {\n        //     for(int j=1; j<=m; j++) {\n        //         if(word1[i-1] == word2[j-1]) dp[i][j] = 0 + dp[i-1][j-1];\n        //         else {\n        //             dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]));\n        //         }\n        //     }\n        // }\n\n        // return dp[n][m];\n\n        // space optimisation solution here\n        vector<int> prev(m+1, 0);\n        vector<int> curr(m+1, 0);\n        for(int j=0; j<=m; j++) prev[j] = j;\n\n        for(int i=1; i<=n; i++) {\n            curr[0] = i;\n            for(int j=1; j<=m; j++) {\n                if(word1[i-1] == word2[j-1]) curr[j] = 0 + prev[j-1];\n                else {\n                    curr[j] = 1 + min(prev[j-1], min(prev[j], curr[j-1]));\n                }\n            }\n            prev = curr;\n        }\n\n        return prev[m];\n    }\n};","compare_resulttitle_slug":"edit-distance","has_notes":false}