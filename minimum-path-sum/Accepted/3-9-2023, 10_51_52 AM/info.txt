{"id":911868852,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678339312,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/911868852/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"10.1 MB","code":"class Solution {\npublic:\n    int solve(vector<vector<int>>& grid, int i, int j, vector<vector<int>>& dp) {\n        // base cases\n        // if first cell reached, return the value of the cell\n        if(i == 0 && j == 0) return grid[i][j];\n        // if out of bounds, don't find minimum answer from here since it will be invalid\n        // hence return a large value\n        if(i < 0 || j < 0) return 1e9;\n\n        // memoization base case \n        if(dp[i][j] != -1) return dp[i][j];\n\n        int up = grid[i][j] + solve(grid, i-1, j, dp);\n        int left = grid[i][j] + solve(grid, i, j-1, dp);\n\n        return dp[i][j] = min(up, left);\n    }\n\n    int minPathSum(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        // vector<vector<int>> dp(m, vector<int>(n, -1));\n        // return solve(grid, m-1, n-1, dp);\n\n        // tabulation solution here\n        // vector<vector<int>> dp(m, vector<int>(n, 0));\n\n        // for(int i=0; i<m; i++) {\n        //     for(int j=0; j<n; j++) {\n        //         if(i == 0 && j == 0) {\n        //             dp[i][j] = grid[i][j];\n        //             continue;\n        //         }\n        //         else {\n        //             int up, left;\n        //             up = left = 1e9;\n        //             if(i > 0) up = grid[i][j] + dp[i-1][j];\n        //             if(j > 0) left = grid[i][j] + dp[i][j-1];\n        //             dp[i][j] = min(up, left);\n        //         }\n        //     }\n        // }\n\n        // return dp[m-1][n-1];\n\n\n        // space optimisation here\n        vector<int> prev(n, 0);\n\n        for(int i=0; i<m; i++) {\n            vector<int> temp(n, 0);\n            for(int j=0; j<n; j++) {\n                if(i == 0 && j == 0) {\n                    temp[j] = grid[i][j];\n                    continue;\n                }\n                else {\n                    int up, left;\n                    up = left = 1e9;\n                    if(i > 0) up = grid[i][j] + prev[j];\n                    if(j > 0) left = grid[i][j] + temp[j-1];\n                    temp[j] = min(up, left);\n                }\n            }\n            prev = temp;\n        }\n\n        return prev[n-1];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false}