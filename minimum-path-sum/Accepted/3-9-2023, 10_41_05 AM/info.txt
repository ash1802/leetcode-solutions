{"id":911863582,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678338665,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/911863582/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"10.2 MB","code":"class Solution {\npublic:\n    int solve(vector<vector<int>>& grid, int i, int j, vector<vector<int>>& dp) {\n        // base cases\n        // if first cell reached, return the value of the cell\n        if(i == 0 && j == 0) return grid[i][j];\n        // if out of bounds, don't find minimum answer from here since it will be invalid\n        // hence return a large value\n        if(i < 0 || j < 0) return 1e9;\n\n        // memoization base case \n        if(dp[i][j] != -1) return dp[i][j];\n\n        int up = grid[i][j] + solve(grid, i-1, j, dp);\n        int left = grid[i][j] + solve(grid, i, j-1, dp);\n\n        return dp[i][j] = min(up, left);\n    }\n\n    int minPathSum(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> dp(m, vector<int>(n, -1));\n        return solve(grid, m-1, n-1, dp);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false}