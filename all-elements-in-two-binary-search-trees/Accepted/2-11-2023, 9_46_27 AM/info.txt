{"id":895703014,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1676088987,"status":10,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/895703014/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"87.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root, vector<int>& in) {\n        if(root == NULL) return;\n        inorder(root->left, in);\n        in.push_back(root->val);\n        inorder(root->right, in);\n    }\n\n    void merge(vector<int> list1, vector<int> list2, vector<int>& ans) {\n        int a = 0, b = 0;\n        int m = list1.size(), n = list2.size();\n\n        while(a < m && b < n) {\n            if(list1[a] < list2[b]) {\n                ans.push_back(list1[a++]);\n            }\n\n            else ans.push_back(list2[b++]);\n        }\n\n        while(a < m) {\n            ans.push_back(list1[a++]);\n        }\n\n        while(b < n) {\n            ans.push_back(list2[b++]);\n        }\n    }\n\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        vector<int> list1;\n        vector<int> list2;\n\n        inorder(root1, list1);\n        inorder(root2, list2);\n\n        vector<int> ans;\n        merge(list1, list2, ans);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees","has_notes":false}