{"id":882530874,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674318535,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/882530874/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\n    queue<int> in;\n    void inorder(TreeNode* root, queue<int>& in) {\n        if(root == NULL) return;\n        inorder(root->left, in);\n        in.push(root->val);\n        inorder(root->right, in);\n    }\n\npublic:\n    BSTIterator(TreeNode* root) {\n        inorder(root,in);\n    }\n    \n    int next() {\n        if(in.empty()) return INT_MAX;\n        int val = in.front();\n        in.pop();\n        return val;\n    }\n    \n    bool hasNext() {\n        return !(in.empty());\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false}