{"id":882534130,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674318871,"status":10,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/882534130/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\n    stack<TreeNode*> st;\n    void findLeftNodes(TreeNode* root) {\n        while(root != NULL) {\n            st.push(root);\n            root = root->left;\n        }\n    }\n\npublic:\n    BSTIterator(TreeNode* root) {\n        findLeftNodes(root);\n    }\n    \n    int next() {\n        TreeNode* top = st.top();\n        st.pop();\n\n        if(top->right != NULL) findLeftNodes(top->right);\n        return top->val;\n    }\n    \n    bool hasNext() {\n        return !st.empty();\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false}