{"id":911619569,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678299225,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/911619569/","is_pending":"Not Pending","title":"Unique Paths","memory":"6 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(int i, int j, vector<vector<int>>& dp) {\n        if(i == 0 && j == 0) return 1;\n        if(i<0 || j<0) return 0;\n\n        if(dp[i][j] != -1) return dp[i][j];\n\n        int left = solve(i, j-1, dp);\n        int up = solve(i-1, j, dp);\n        \n        return dp[i][j] = left + up;\n    }\n\n    int uniquePaths(int m, int n) {\n        // vector<vector<int>> dp(m, vector<int>(n, 0));\n        // // return solve(m-1,n-1, dp);\n        \n        // // tabulation solution here, top-down approach followed\n        // dp[0][0] = 1;\n        // for(int i=0; i<m; i++) {\n        //     for(int j=0; j<n; j++) {\n        //         if(i > 0) dp[i][j] += dp[i-1][j];\n        //         if(j > 0) dp[i][j] += dp[i][j-1];\n        //     }\n        // }\n        // return dp[m-1][n-1];\n\n        // space optimisation here\n        // if there is usage of previous row and previous column\n        vector<int> prev(n, 0);\n        for(int i=0; i<m; i++) {\n            vector<int> temp(n, 0);\n            for(int j=0; j<n; j++) {\n                if(i == 0 && j == 0) temp[j] = 1;\n                else {\n                    if(i > 0) temp[j] += prev[j];\n                    if(j > 0) temp[j] += temp[j-1];\n                }\n            }\n            prev = temp;\n        }\n\n        return prev[n-1];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false}