{"id":912813530,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678470215,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/912813530/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"16.8 MB","code":"class Solution {\npublic:\n    // memoization solution here\n    int solve(int i, int j1, int j2, int n, int m, vector<vector<int>> &grid, vector<vector<vector<int>>> &dp)\n    {\n        // base cases here: overflow and destination reached\n        if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) return -1e9;\n        if (i == n - 1)\n        {\n            if (j1 == j2) return grid[i][j1];\n            else return grid[i][j1] + grid[i][j2];\n        }\n\n        \n        if (dp[i][j1][j2] != -1) return dp[i][j1][j2];\n\n        int maxi = INT_MIN;\n        for (int di = -1; di <= 1; di++)\n        {\n            for (int dj = -1; dj <= 1; dj++)\n            {\n                int ans = 0;\n                if (j1 == j2) ans = grid[i][j1] + solve(i + 1, j1 + di, j2 + dj, n, m, grid, dp);\n                else ans = grid[i][j1] + grid[i][j2] + solve(i + 1, j1 + di, j2 + dj, n, m, grid, dp);\n                maxi = max(maxi, ans);\n            }\n        }\n\n        return dp[i][j1][j2] = maxi;\n    }\n\n    int cherryPickup(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vector<vector<vector<int>>> dp(n, vector<vector<int>>(m, vector<int>(m, -1)));\n        return solve(0, 0, m - 1, n, m, grid, dp);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii","has_notes":false}