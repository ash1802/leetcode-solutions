{"id":824577009,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1666026414,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/824577009/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"176.2 MB","code":"class TrieNode {\n    public: \n    char data;\n    TrieNode* children[26];\n    bool isTerminal;\n\n    TrieNode(char ch) {\n        data = ch;\n        for(int i=0; i<26; i++) {\n            children[i] = NULL;\n        }\n        isTerminal = false;\n    }  \n};\n\nclass Trie {\n    public:\n    TrieNode *root;\n    Trie() {\n        root = new TrieNode('\\0');\n    }\n    \n    void insertUtil(TrieNode *root, string word) {\n        // base case\n        if(word.length() == 0) {\n            root->isTerminal = true;\n            return;\n        }\n        \n        // finding the index to insert into trie\n        int index = word[0] - 'a';\n        TrieNode *child = new TrieNode(word[0]);\n        \n        // character present, hence proceed\n        if(root->children[index] != NULL) {\n            child = root->children[index];\n        }\n        \n        // character absent, so add it to the trie\n        else {\n            root->children[index] = child;\n        }\n        \n        // call for the rest of the letters recursively\n        insertUtil(child, word.substr(1));\n    }\n    \n    void insert(string word) {\n        insertUtil(root, word);\n    }\n    \n    bool searchUtil(TrieNode *root, string word) {\n        // base case\n        if(word.length() == 0) return root->isTerminal;\n\n        int index = word[0] - 'a';\n        TrieNode *child;\n\n        // character present\n        if(root->children[index] != NULL) {\n            child = root->children[index];\n        }\n\n        // character absent\n        else return false;\n\n        // recursive call\n        return searchUtil(child, word.substr(1));\n    }\n    \n    bool search(string word) {\n        return searchUtil(root,word);\n    }\n    \n    bool prefixUtil(TrieNode *root, string word) {\n        // base case\n        if(word.length() == 0) return true;\n\n        int index = word[0] - 'a';\n        TrieNode *child;\n\n        // character present\n        if(root->children[index] != NULL) {\n            child = root->children[index];\n        }\n\n        // character absent\n        else return false;\n\n        // recursive call\n        return prefixUtil(child, word.substr(1));\n    }\n    \n    bool startsWith(string prefix) {\n        return prefixUtil(root, prefix);\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}