{"id":780454112,"lang":"cpp","lang_name":"C++","time":"9 months, 1 week","timestamp":1661185939,"status":10,"status_display":"Accepted","runtime":"504 ms","url":"/submissions/detail/780454112/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"93.5 MB","code":"class Solution {\nprivate:\n    vector<int> nextSmallerElement(vector<int> arr, int n) {\n        stack<int> s;\n        s.push(-1);\n        vector<int> ans(n);\n\n        for(int i=n-1; i>=0 ; i--) {\n            int curr = arr[i];\n            while(s.top() != -1 && arr[s.top()] >= curr)\n            {\n                s.pop();\n            }\n            //ans is stack ka top\n            ans[i] = s.top();\n            s.push(i);\n        }\n        return ans;\n    }\n    \n    vector<int> prevSmallerElement(vector<int> arr, int n) {\n        stack<int> s;\n        s.push(-1);\n        vector<int> ans(n);\n\n        for(int i=0; i<n; i++) {\n            int curr = arr[i];\n            while(s.top() != -1 && arr[s.top()] >= curr)\n            {\n                s.pop();\n            }\n            //ans is stack ka top\n            ans[i] = s.top();\n            s.push(i);\n        }\n        return ans; \n    }\n    \npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        int n= heights.size();\n        \n        vector<int> next(n);\n        next = nextSmallerElement(heights, n);\n            \n        vector<int> prev(n);\n        prev = prevSmallerElement(heights, n);\n        \n        int area = INT_MIN;\n        for(int i=0; i<n; i++) {\n            int l = heights[i];\n            \n            if(next[i] == -1) {\n                next[i] = n;\n            }\n             int b = next[i] - prev[i] - 1;\n            int newArea = l*b;\n            area = max(area, newArea);\n        }\n        return area;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false}