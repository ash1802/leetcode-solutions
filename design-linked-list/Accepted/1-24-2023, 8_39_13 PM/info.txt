{"id":884420410,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674572953,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/884420410/","is_pending":"Not Pending","title":"Design Linked List","memory":"19.8 MB","code":"class Node {\n  public:\n    int val;\n    Node* next;\n\tNode(int x) { val=x; next=nullptr;}\n};\n\nclass MyLinkedList {\npublic:\n    Node* head;\n    int size;\n    // Constructor\n\tMyLinkedList() { head=nullptr; size=0;}\n\t\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    int get(int index) {\n        // Return -1 for invalid index\n        if(index>=size || index < 0) {\n            return -1;\n        }\n        Node* current=head;\n        for(int i=0;i<index;++i) {\n            current= current->next;\n        }\n        return current->val;\n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    void addAtHead(int val) {\n        addAtIndex(0, val);\n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    void addAtTail(int val) {\n        addAtIndex(size, val);       \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    void addAtIndex(int index, int val) {\n        // Return if invalid index\n        if (index>size || index < 0) {\n            return;\n        }\n        Node* current= head;\n        Node* new_node = new Node(val);\n        // index == 0 implies insert at head\n        // Considered separately as we need to update head\n        if (index == 0) {\n            new_node->next = current;\n            // Update head\n            head = new_node;\n        }\n        else {\n            // Run loop till index-1 as we need to insert node at index\n            for(int i=0;i<index-1;++i) {\n                current= current->next;\n            }        \n            new_node->next = current->next;\n            current->next = new_node;\n        }\n        // Increase size whenever we insert node\n        size++;\n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    void deleteAtIndex(int index) {\n        // Return if invalid index\n        if(index>=size || index < 0) {\n            return;\n        }\n        // index==0 implies delete at head\n        // Considered separately as we need to update head\n        if (index == 0) {\n            Node* nextNode = head->next;\n            // Always remember to free memory to prevent memory leak\n            delete head;\n            head = nextNode;            \n        }\n        else {\n            Node* current= head;\n            // Run loop till index-1 as we need to insert node at index\n            for(int i=0;i<index-1;++i) {\n                current= current->next;\n            }\n            Node* nextNode = current->next->next;\n            // Always remember to free memory to prevent memory leak\n            delete current->next;\n            current->next = nextNode;\n        }\n        // Decrease size whenever we delete node\n            size--;\n    }\n    /*\n        Default destructor only deletes head and size (allocated by constructor)\n        We need destructor to free the memory used by all individual nodes\n    */\n    // Destructor\n    ~MyLinkedList()\n    {\n        Node *p = head;\n        // Delete node at head while head is not null\n        while (head!=nullptr)\n        {\n            head= head->next;\n            delete p;\n            p=head;\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-linked-list","has_notes":false}