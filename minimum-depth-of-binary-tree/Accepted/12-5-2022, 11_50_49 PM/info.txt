{"id":855165418,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1670264449,"status":10,"status_display":"Accepted","runtime":"698 ms","url":"/submissions/detail/855165418/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"144.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    struct qItem\n{\n   TreeNode *node;\n   int depth;\n};\npublic:\n    int minDepth(TreeNode* root) {\n   if (root == NULL)\n        return 0;\n \n    // Create an empty queue for level order traversal\n    queue<qItem> q;\n \n    // Enqueue Root and initialize depth as 1\n    qItem qi = {root, 1};\n    q.push(qi);\n \n    // Do level order traversal\n    while (q.empty() == false)\n    {\n       // Remove the front queue item\n       qi = q.front();\n       q.pop();\n \n       // Get details of the remove item\n       TreeNode *node = qi.node;\n       int depth = qi.depth;\n \n       // If this  is the first leaf node seen so far\n       // Then return its depth as answer\n       if (node->left == NULL && node->right == NULL)\n          return depth;\n \n       // If left subtree is not NULL, add it to queue\n       if (node->left != NULL)\n       {\n          qi.node  = node->left;\n          qi.depth = depth + 1;\n          q.push(qi);\n       }\n \n       // If right subtree is not NULL, add it to queue\n       if (node->right != NULL)\n       {\n          qi.node  = node->right;\n          qi.depth = depth+1;\n          q.push(qi);\n       }\n    }\n    return 0;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false}