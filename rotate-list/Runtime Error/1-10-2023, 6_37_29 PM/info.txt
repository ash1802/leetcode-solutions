{"id":875437898,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1673356049,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/875437898/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if(k == 0) return head;\n\n        ListNode* tail = head;\n        ListNode* prev = NULL;\n\n        unordered_map<ListNode*, ListNode*> prevNode;\n        int len = 0;\n\n        while(tail->next != NULL) {\n            len++;\n            prevNode[tail] = prev;\n            prev = tail;\n            tail = tail->next;\n        }\n\n        prevNode[head] = tail;\n        tail->next = head;\n        k = k % len;\n\n        int i=1; \n        ListNode *temp = tail;\n        while(i < k) {\n            temp = prevNode[temp];\n            i++;\n        }\n\n        head = temp;\n        prevNode[temp]->next = NULL;\n        return head;\n    }\n};","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"rotate-list","has_notes":false}