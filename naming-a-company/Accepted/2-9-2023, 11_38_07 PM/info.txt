{"id":894870422,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1675966087,"status":10,"status_display":"Accepted","runtime":"511 ms","url":"/submissions/detail/894870422/","is_pending":"Not Pending","title":"Naming a Company","memory":"83.3 MB","code":"class Solution {\npublic:\n    long long distinctNames(vector<string>& ideas) {\n        \n        // Group idea by their initials.\n        unordered_set<string> initialGroup[26];\n\n        for (auto& idea : ideas) initialGroup[idea[0] - 'a'].insert(idea.substr(1));\n        \n        // Calculate number of valid names from every pair of groups.\n        long long ans = 0;\n        for (int i = 0; i < 25; i++) {\n            for (int j = i + 1; j < 26; j++) {\n                // Get the number of mutual suffixes.\n                int numOfMutual = 0;\n                for (auto& ideaA : initialGroup[i]) {\n                    if (initialGroup[j].count(ideaA)) {\n                        numOfMutual++;\n                    }\n                }\n\n                // Valid names are only from distinct suffixes in both groups.\n                // Since we can swap a with b and swap b with a to create two valid names, multiple answer by 2.\n                ans += 2LL * (initialGroup[i].size() - numOfMutual) * (initialGroup[j].size() - numOfMutual);\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"naming-a-company","has_notes":false}