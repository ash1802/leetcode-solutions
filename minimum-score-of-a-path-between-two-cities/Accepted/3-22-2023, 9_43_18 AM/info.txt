{"id":919891447,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1679458398,"status":10,"status_display":"Accepted","runtime":"455 ms","url":"/submissions/detail/919891447/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"123.6 MB","code":"class Solution {\npublic:\n    int minScore(int n, vector<vector<int>>& roads) {\n        //create adjacency list of roads to make it a graph\n        vector<pair<int, int>> adj[n+1];\n        for(int i=0; i<roads.size(); i++)\n        {\n            adj[roads[i][0]].push_back({roads[i][1], roads[i][2]});\n            adj[roads[i][1]].push_back({roads[i][0], roads[i][2]});\n        }\n        \n        //mark possible visitable nodes \n        vector<int> vis(n+1, 0);\n        queue<int> q;\n        q.push(1), vis[1]=1;\n        while(!q.empty())\n        {\n            int node=q.front();\n            q.pop();\n            for(auto it: adj[node])\n            {\n                if(!vis[it.first])\n                {\n                    q.push(it.first);\n                    vis[it.first]=1;\n                }\n            }\n        }\n            \n        //find minimum path score among visited nodes\n        int mini_path = INT_MAX;\n        for(int i=0; i<roads.size(); i++)\n        {\n            if(vis[roads[i][0]] && vis[roads[i][1]] && roads[i][2] < mini_path)\n                mini_path = roads[i][2];\n        }\n        return mini_path;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false}