{"id":900717051,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1676777899,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/900717051/","is_pending":"Not Pending","title":"Count the Number of Square-Free Subsets","memory":"N/A","code":"class Solution {\npublic:\n    long long M = 1000000007;\n    \n    bool isSquareFree(int n)\n    {\n        if (n % 2 == 0)\n           n = n/2;\n\n        // If 2 again divides n, then n is\n        // not a square free number.\n        if (n % 2 == 0)\n           return false;\n\n        // n must be odd at this point.  So we can \n        // skip one element (Note i = i +2)\n        for (int i = 3; i <= sqrt(n); i = i+2)\n        {\n            // Check if i is a prime factor\n            if (n % i == 0)\n            {\n               n = n/i;\n\n               // If i again divides, then\n               // n is not square free\n               if (n % i == 0)\n                   return false;\n            }\n        }\n\n        return true;\n    }\n    \n    void solve(vector<int> nums, long long int& sum, int i, int& ans) {    \n        if(i == nums.size()) {\n            if(sum > 1 && isSquareFree(sum)) ans = ((ans%M) + (1%M))%M;\n            return;\n        }\n        // pick current element\n        sum = (sum%M * nums[i]%M)%M;\n        solve(nums, sum, i+1, ans);\n        // don't pick current element\n        sum /= nums[i];\n        solve(nums, sum, i+1, ans);\n    }\n    \n    int squareFreeSubsets(vector<int>& nums) {\n        if(nums.size() == 1 && isSquareFree(nums[0])) return 1;\n    \n        long long int sum = 1;\n        int i = 0;\n        int ans = 0;\n        solve(nums, sum, i, ans);\n        // for(int sum : sums) cout << sum << \" \";\n        return ans;\n    }\n};","compare_result":"111110011110000000000000000000000000000000","title_slug":"count-the-number-of-square-free-subsets","has_notes":false}