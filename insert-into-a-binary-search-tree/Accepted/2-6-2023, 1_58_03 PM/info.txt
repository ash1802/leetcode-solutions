{"id":892521310,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1675672083,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/892521310/","is_pending":"Not Pending","title":"Insert into a Binary Search Tree","memory":"56.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        // if root is NULL then first node in BST\n        if(root == NULL) {\n            root = new TreeNode(val);\n            return root;\n        }\n\n        // insert in right sub-tree if data greater than root\n        if(val > root->val) {\n            root->right = insertIntoBST(root->right, val);\n        } \n        // if data smaller than root insert in left sub-tree\n        else {\n            root->left = insertIntoBST(root->left, val);    \n        }\n\n        // return the root (has the new BST with inserted node)\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"insert-into-a-binary-search-tree","has_notes":false}