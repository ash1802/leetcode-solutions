{"id":856608269,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1670500634,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/856608269/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"12.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode *root, vector<int>& ans) {\n        if(root == NULL) return;\n        inorder(root->left, ans);\n        if(root->left == NULL && root->right == NULL) ans.push_back(root->val);\n        inorder(root->right, ans);\n    }\n\n\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        if((root1 == NULL && root2 != NULL) || (root1 != NULL && root2 == NULL)) return false;\n        \n        vector<int> ans1, ans2;\n        inorder(root1, ans1);\n        inorder(root2, ans2);\n\n        if(ans1.size() != ans2.size()) return false;\n        for(int i=0; i<ans1.size(); i++) {\n            if(ans1[i] != ans2[i]) return false;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false}