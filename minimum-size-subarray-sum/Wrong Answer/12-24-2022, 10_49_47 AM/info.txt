{"id":864571377,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1671859187,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/864571377/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"class Solution {\npublic:\n    int minSubArrayLen(int k, vector<int>& arr) {\n        unordered_map<int,int> mp;\n        int sum = 0;\n        mp[sum] = -1;\n        int n = arr.size();\n        int minLen = n+1;\n\n        for(int i=0; i<n; i++) {\n            sum += arr[i];\n            if(mp.find(sum - k) != mp.end()) {\n                int len = i - mp[sum-k];\n                minLen = min(minLen,len);\n            }\n            mp[sum] = i;\n        }\n\n        if(minLen == n+1) return 0;\n        return minLen;\n    }\n};","compare_result":"11101110011100011001","title_slug":"minimum-size-subarray-sum","has_notes":false}