{"id":863235111,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1671628966,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/863235111/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void findPaths(TreeNode* root, string& ans, vector<string>& paths) {\n        if(root == NULL) return;\n\n        ans+=to_string(root->val);\n\n        if(root->left==NULL && root->right==NULL ){\n            paths.push_back(ans);\n        }\n\n        ans+=\"->\";\n\n        findPaths(root->left,ans,paths);\n        findPaths(root->right,ans,paths);\n    }\n\n    vector<string> binaryTreePaths(TreeNode* root) {\n        vector<string> paths;\n        string ans = \"\";\n        findPaths(root,ans,paths);\n        return paths;\n    }\n};","compare_result":"0111000000000000100010010011010010011101010010000001100000000110100000010000010011001110000111000101101010101000111000100000100000010000100000000010000100010000001000000100000101101110001010111010001001001000","title_slug":"binary-tree-paths","has_notes":false}