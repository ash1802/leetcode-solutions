{"id":890636288,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1675421519,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/890636288/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root == NULL) return NULL;\n        \n        TreeNode* leftNode = lowestCommonAncestor(root->left, p, q);\n        TreeNode* rightNode = lowestCommonAncestor(root->right, p, q);\n\n        if(root->val == p->val) return root;\n        if(root->val == q->val) return root;\n        \n        if(leftNode && rightNode) return root;\n        else if(!leftNode && rightNode) return rightNode;\n        else if(leftNode && !rightNode) return leftNode;\n        else return NULL;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false}