{"id":882276488,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674290960,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/882276488/","is_pending":"Not Pending","title":"Min Stack","memory":"N/A","code":"class MinStack {\n    stack<long long> st;\n    long long mini;\npublic:\n    MinStack() {\n        mini = INT_MAX;\n    }\n    \n    void push(int val) {\n        if(st.empty()) {\n            st.push(val);\n            mini = val;\n        }\n        else {\n            if(val < mini) {\n                long long newVal = 2*val - mini;\n                st.push(newVal);\n                mini = val;\n            }\n\n            else {\n                st.push(val);\n            }\n        }\n    }\n    \n    void pop() {\n        if(st.empty()) return;\n\n        long long curr = st.top();\n        st.pop();\n\n        if(curr > mini) return;\n        else {\n            long long val = 2*mini - curr;\n            mini = val;\n        }\n    }\n    \n    int top() {\n        return st.top();       \n    }\n    \n    int getMin() {\n        if(st.empty()) return -1;\n        return mini;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111110000000000000000000000","title_slug":"min-stack","has_notes":false}