{"id":754170938,"lang":"cpp","lang_name":"C++","time":"10 months, 2 weeks","timestamp":1658545647,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/754170938/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"6.4 MB","code":"class Solution {\npublic:\n    void solve(string digits, string output, int i, vector<string>& ans) {\n        // base case\n        if(i == digits.length()) {\n            ans.push_back(output);\n            return;\n        }\n\n        // storing the mapping of each digit in a vector of strings (0 and 1 have empty strings)\n        vector<string> maps = {\"\",\"\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\n        // knowing which letters to be used from the digits\n        string letters = maps[digits[i] - '0'];\n\n        for(int j=0; j<letters.length(); j++) {\n            // now for each letter, we push it to the answer, recursively call for the next index\n            output.push_back(letters[j]);\n            solve(digits,output,i+1,ans);\n            // while coming back we pop out the pushed character to insert the next\n            output.pop_back();\n        }\n    }\n\n    vector<string> letterCombinations(string digits) {\n        vector<string> ans;\n        if(digits.length() == 0) {\n            return ans;\n        }\n\n        int i=0;\n        string output = \"\";\n        solve(digits,output,i,ans);\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false}