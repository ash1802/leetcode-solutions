{"id":930636345,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1681030902,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/930636345/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"9 MB","code":"class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& arr) {\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        vector<int> dp(n,1);\n        vector<int> hash(n,1);\n        \n        for(int i=0; i<=n-1; i++){\n            hash[i] = i;\n            for(int prev = 0; prev <=i-1; prev ++){\n                if(arr[i]%arr[prev] == 0 && 1 + dp[prev] > dp[i]){\n                    dp[i] = 1 + dp[prev];\n                    hash[i] = prev;\n                }\n            }\n        }\n        \n        int lastEle = -1;\n        int lastIndex =-1;\n        for(int i=0; i<=n-1; i++){\n            if(dp[i] > lastEle){\n                lastEle = dp[i];\n                lastIndex = i;\n            }\n        }\n        \n        vector<int> ans;\n        ans.push_back(arr[lastIndex]);\n        while(hash[lastIndex] != lastIndex){ \n            lastIndex = hash[lastIndex];\n            ans.push_back(arr[lastIndex]);    \n        }\n\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false}