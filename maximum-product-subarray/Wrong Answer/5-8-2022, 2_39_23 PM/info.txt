{"id":695406639,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1652000963,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/695406639/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int maxi = 1;\n        int mini = 1;\n        int overallMax = INT_MIN;\n        int n = nums.size();\n        \n        for(int i=0; i<n; i++) {\n            if(nums[i] > 0) {\n                maxi = maxi * nums[i];\n                mini = min(1, mini*nums[i]);\n            }\n            \n            else if(nums[i] == 0) {\n                mini = maxi = 1;\n            }\n            \n            else {\n                maxi = max(mini * nums[i],1);\n                mini = maxi *  nums[i];\n            }\n            \n            overallMax = max(overallMax,max(maxi,mini));\n        }\n        \n        if(overallMax < 0) {\n            overallMax = *max_element(nums.begin(), nums.end());\n        }\n        \n        return overallMax;\n    }\n};","compare_result":"10001111110011101101000000110100111111110101111111110110101010111010011111101111101001101011110101011110100010010111011111111000111011011010100110101000111011100101100010010101000000000000","title_slug":"maximum-product-subarray","has_notes":false}