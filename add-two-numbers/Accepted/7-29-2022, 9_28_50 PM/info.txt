{"id":759969009,"lang":"cpp","lang_name":"C++","time":"10 months, 1 week","timestamp":1659110330,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/759969009/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"71.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void insertAtHead(ListNode *&head, int d)\n    {\n        ListNode *newListNode = new ListNode(d);\n        newListNode->next = head;\n        head = newListNode;\n    }\n\n    ListNode *reverseLinkedList(ListNode *&head) {\n        ListNode *curr = head;\n        ListNode *prev = NULL;\n        ListNode *nextp = NULL;\n\n        while(curr != NULL) {\n            nextp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextp;\n        }\n\n        return prev;\n    }\n\n    ListNode* addTwoNumbers(ListNode *l1, ListNode *l2) {\n        int carry = 0;\n        ListNode *result = NULL;\n        while(l1 != NULL && l2 != NULL) {\n            int sum = l1->val + l2->val + carry;\n            carry = sum/10;\n            sum = sum%10;\n            insertAtHead(result,sum);\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n\n        while(l1 != NULL) {\n            int sum = l1->val + carry;\n            carry = sum/10;\n            sum = sum%10;\n            insertAtHead(result,sum);\n            l1 = l1->next;\n        }\n\n        while(l2 != NULL) {\n            int sum = l2->val + carry;\n            carry = sum/10;\n            sum = sum%10;\n            cout << sum << \" \" << carry << endl;\n            insertAtHead(result,sum);\n            l2 = l2->next;\n        }\n\n        if(carry != 0) {\n            insertAtHead(result,carry);\n            carry /= 10;\n        }\n\n        return reverseLinkedList(result);\n    }\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false}