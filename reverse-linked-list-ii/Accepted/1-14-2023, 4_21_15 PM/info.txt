{"id":877952459,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1673693475,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/877952459/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"7.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reverseLL(ListNode* &head, ListNode* &tail) {\n        if(head == tail) return;\n\n        tail->next = NULL;\n\n        ListNode *prev = NULL;\n        ListNode *curr = head;\n        ListNode *nextP = NULL;\n\n        while(curr != NULL) {\n            nextP = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextP;\n        }\n\n        head = prev;\n        while(prev->next != NULL) prev = prev->next;\n        tail = prev;\n    }\n\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if(left == right) return head;\n\n        ListNode *leftNode = head;\n        ListNode *prev = NULL;\n        int i=0;\n\n        while(i < left-1) {\n            prev = leftNode;\n            leftNode = leftNode->next;\n            i++;\n        }\n        \n        ListNode *rightNode = NULL;\n        ListNode *nextP = head;\n        i = 0;\n        while(i < right) {\n            rightNode = nextP;\n            nextP = nextP->next;\n            i++;\n        }\n\n        reverseLL(leftNode, rightNode);\n\n        if(prev != NULL) prev->next = leftNode;\n        else head = leftNode;\n        rightNode->next = nextP;\n\n        return head;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii","has_notes":false}