{"id":886381012,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1674838778,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/886381012/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"17.4 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\n    public:\n    Node* fnext(Node* root) {\n        if (root == NULL) return NULL;\n        if (root->left) return root->left;  \n        if (root->right) return root->right;\n        return fnext(root->next);\n    }\n\n    Node* connect(Node* root) {\n        if (root == NULL) return NULL;\n        if (root->left) {\n            if (root->right) {\n                root->left->next = root->right;\n            } else {\n                root->left->next = fnext(root->next);\n            }\n        }\n        \n        if (root->right) {\n            root->right->next = fnext(root->next);\n        }\n        \n        connect(root->right);\n        connect(root->left);\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false}