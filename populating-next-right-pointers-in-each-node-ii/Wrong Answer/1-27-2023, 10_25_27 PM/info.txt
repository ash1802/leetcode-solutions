{"id":886378851,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1674838527,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/886378851/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"N/A","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\n    void connectUtil(Node* root) {\n        if(root == NULL || (!root->left && !root->right)) return;\n        \n        if(root->left) {\n            if(root->right) root->left->next = root->right;\n            else if(root->next) {\n                if(root->next->left) root->left->next = root->next->left;\n                else root->left->next = root->next->right;\n            }\n        }\n\n        if(root->right) {\n            if(root->next) {\n                if(root->next->left) root->right->next = root->next->left;\n                else root->right->next = root->next->right;\n            }\n        }\n\n        connectUtil(root->left);\n        connectUtil(root->right);\n    }\n\n    public:\n        Node* connect(Node* root) {\n            if(root == NULL) return root;\n            root->next = NULL;\n            connectUtil(root);\n            return root;\n        }\n};","compare_result":"1111111111111111100111111111111011001110000000000000000","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false}