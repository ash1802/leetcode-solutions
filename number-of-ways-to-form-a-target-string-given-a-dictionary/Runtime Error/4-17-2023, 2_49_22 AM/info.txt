{"id":934927074,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1681679962,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/934927074/","is_pending":"Not Pending","title":"Number of Ways to Form a Target String Given a Dictionary","memory":"N/A","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<string>& words, string target, int k, int j, vector<vector<int>>& dp) {\n        // base cases\n        if(j == target.size()) return 1;\n        if(k == words[0].size() || words[0].size() - k < target.size() - j) return 0;\n\n        if(dp[k][j] != -1) return dp[k][j];\n\n        int count = 0;\n        // not picking the current positioned character from dictionary\n        count += solve(words, target, k+1, j, dp);\n        \n        // picking each character from current position one at a time\n        for(int i=0; i<words.size(); i++) {\n            if(words[i][k] == target[j]) {\n                count += solve(words, target, k+1, j+1, dp);\n            }\n        }\n\n        return dp[k][j] = count;\n    }\n\n    int numWays(vector<string>& words, string target) {\n        int m = words[0].size();\n        int n = target.size();\n        vector<vector<int>> dp(m, vector<int>(n, -1));\n        return solve(words, target, 0, 0, dp);\n    }\n};","compare_result":"11111111111111111111111111111111111111111100000000000000000000000000000000000000000000000","title_slug":"number-of-ways-to-form-a-target-string-given-a-dictionary","has_notes":false}