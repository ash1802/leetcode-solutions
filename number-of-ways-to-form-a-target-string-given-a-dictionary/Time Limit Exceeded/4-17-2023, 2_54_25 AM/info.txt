{"id":934928418,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1681680265,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/934928418/","is_pending":"Not Pending","title":"Number of Ways to Form a Target String Given a Dictionary","memory":"N/A","code":"class Solution {\npublic:\n    long solve(vector<string>&words, string &target, int i, int j, vector<vector<int>>& dp, vector<vector<int>> freq){\n\n        if(j == target.size()) return 1;\n        if(i == words[0].size() || words[0].size() - i < target.size() - j) return 0;\n        \n        if(dp[i][j] != -1) return dp[i][j];\n        \n        long count = 0;\n        int  curPos = target[j] - 'a';\n        count += solve(words, target, i + 1, j, dp, freq);\n        count += freq[i][curPos] * solve(words, target, i + 1, j + 1, dp, freq);\n        return dp[i][j] = count % 1000000007;\n    }\n\n    int numWays(vector<string>& words, string target) {\n        int m = words[0].size();\n        int n = target.size();\n        vector<vector<int>> dp(m, vector<int>(n, -1));\n\n        vector<vector<int>> freq(m, vector<int>(26, 0));\n        for(int i=0; i<words.size(); i++){\n            for(int j = 0; j < words[0].size(); j++){\n                int  curPos = words[i][j] - 'a';\n                freq[j][curPos]++;\n            }\n        }\n\n        return solve(words,target,0,0,dp,freq);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111110000000000","title_slug":"number-of-ways-to-form-a-target-string-given-a-dictionary","has_notes":false}