{"id":932932436,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1681369888,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/932932436/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"N/A","code":"class Solution {\npublic:\n    bool isPalindrome(string s, int i, int j) {\n        while(i <= j) {\n            if(s[i] != s[j]) return false;\n            i++; j--;\n        }\n        return true;\n    }\n\n    // recursion + memoization solution here\n    int solve(string s, int n, int i, vector<int>& dp) {\n        if(i == n) return 0;\n\n        if(dp[i] != -1) return dp[i];\n\n        int mini = INT_MAX;\n        for(int j=i; j<n; j++) {\n            int cost = 1e9;\n            if(isPalindrome(s, i, j)) {\n                cost = 1 + solve(s, n, j+1, dp);\n                mini = min(cost, mini);\n            }\n        }\n\n        return dp[i] = mini;\n    }\n\n    int minCut(string s) {\n        int n = s.size();\n        // vector<int> dp(n, -1);\n        // return solve(s, n, 0, dp) - 1;\n\n        // tabulation solution here\n        vector<int> dp(n+1, 0);\n\n        for(int i=n-1; i>=0; i--) {\n            int mini = INT_MAX;\n            for(int j=i; j<n; j++) {\n                int cost = 1e9;\n                if(isPalindrome(s, i, j)) {\n                    cost = 1 + dp[j+1];\n                    mini = min(cost, mini);\n                }\n            }\n\n            dp[i] = mini;\n        }\n\n        return dp[0] - 1;\n    }\n};","compare_result":"111111111111111111111111111111110000","title_slug":"palindrome-partitioning-ii","has_notes":false}