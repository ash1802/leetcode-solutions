{"id":938327755,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1682236684,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/938327755/","is_pending":"Not Pending","title":"Restore The Array","memory":"20.8 MB","code":"class Solution {\npublic: \n    // recursion + memoization here\n    int solve(const string& s, long k, int i, vector<int>& dp) {\n        // base case -> Found a valid way\n        if (i == s.size()) return 1; \n        // all numbers are in range [1, k] and there are no leading zeros -> So numbers starting with 0 mean invalid!\n        if (s[i] == '0') return 0; \n        if (dp[i] != -1) return dp[i];\n        int ans = 0;\n        long num = 0;\n        for (int j = i; j < s.size(); j++) {\n            // num is the value of the substring s[i..j]\n            num = num * 10 + s[j] - '0'; \n            // num must be in range [1, k]\n            if (num > k) break; \n            ans += solve(s, k, j + 1, dp);\n            ans %= 1000000007;\n        }\n        return dp[i] = ans;\n    }\n\n    int numberOfArrays(string s, int k) {\n        vector<int> dp(s.size(), -1);\n        return solve(s, k, 0, dp);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"restore-the-array","has_notes":false}