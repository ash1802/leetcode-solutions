{"id":922271924,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1679813615,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/922271924/","is_pending":"Not Pending","title":"Distinct Subsequences","memory":"30.2 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(string s, string t, int i, int j, vector<vector<int>>& dp) {\n        // base cases\n        if(j < 0) return 1;\n        if(i < 0) return 0;\n\n        if(dp[i][j] != -1) return dp[i][j];\n\n        if(s[i] == t[j]) {\n            // one case is when we find a match in the current string, and the other case\n            // is where we ignore the match and try to find another occurence of the same character\n            return dp[i][j] = solve(s, t, i-1, j-1, dp) + solve(s, t, i-1, j, dp);\n        }\n\n        // here we shrink first string because we found no matching characters\n        else return dp[i][j] = solve(s, t, i-1, j, dp);        \n    }\n\n    int numDistinct(string s, string t) {\n        int n = s.size();\n        int m = t.size();\n        // vector<vector<int>> dp(n, vector<int>(m, -1));\n        // return solve(s, t, n-1, m-1, dp);\n\n        // tabulation solution here\n        vector<vector<double>> dp(n+1, vector<double>(m+1, 0));\n\n        // base cases\n        for(int i=0; i<=n; i++) dp[i][0] = 1;\n        for(int j=1; j<=m; j++) dp[0][j] = 0;\n\n        for(int i=1; i<=n; i++) {\n            for(int j=1; j<=m; j++) {\n                if(s[i-1] == t[j-1]) {\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n                }\n                else dp[i][j] = dp[i-1][j];   \n            }\n        }\n\n        return (int)dp[n][m];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"distinct-subsequences","has_notes":false}