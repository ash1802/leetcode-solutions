{"id":898723580,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1676491390,"status":10,"status_display":"Accepted","runtime":"369 ms","url":"/submissions/detail/898723580/","is_pending":"Not Pending","title":"Find K Pairs with Smallest Sums","memory":"110.1 MB","code":"class Solution {\npublic:\n    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) { // time complexity is O(m*nlogk), m = nums1 size, n = nums2 size\n        priority_queue<pair<int,pair<int,int>>> pq;  // default: the greatest comes top\n        for(int i=0;i<nums1.size();i++) {\n            for(int j=0;j<nums2.size();j++) {\n                int sum=nums1[i]+nums2[j];\n                if (pq.size()<k) {\n                    pq.push({sum,{nums1[i],nums2[j]}});\n                }\n                else if (sum<pq.top().first) {\n                    pq.pop();\n                    pq.push({sum,{nums1[i],nums2[j]}});\n                } else {\n                    break;  // save time! since we don't need to traverse the rest of vector 2\n                }\n            }\n        }\n        vector<vector<int>> ans;\n        while(!pq.empty()) {\n            ans.push_back({pq.top().second.first, pq.top().second.second});\n            pq.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"find-k-pairs-with-smallest-sums","has_notes":false}