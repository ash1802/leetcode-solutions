{"id":879798734,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1673948559,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/879798734/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    class compare {\n        public:\n        bool operator()(ListNode *a, ListNode *b) {\n            return a->val > b->val;\n        }\n    };\n\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        ListNode* newList = new ListNode(0);\n        ListNode* tail = newList;\n\n        priority_queue<ListNode*, vector<ListNode*>, compare> pq;\n\n        for(auto list: lists) {\n            if(list) pq.push(list);\n        }\n\n        while(pq.size() > 0) {\n            ListNode *temp = pq.top();\n            tail->next = temp;\n            tail = temp;\n            pq.pop();\n\n            if(temp->next != NULL) {\n                pq.push(temp->next);\n            }\n        }\n\n        return newList->next;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false}