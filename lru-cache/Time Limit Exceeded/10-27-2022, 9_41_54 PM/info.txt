{"id":831496305,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1666887114,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/831496305/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUNode {\n    public:\n    int value;\n    int time;\n    \n    LRUNode(int value, int time) {\n        this->value = value;\n        this->time = time;\n    }\n};\n\nclass LRUCache {\n    map<int, LRUNode*> mp;\n    int cap;\n    int time;\n    \npublic:\n    LRUCache(int capacity) {\n        cap = capacity;\n        time = 0;\n    }\n    \n    int get(int key) {\n        if(mp.find(key) != mp.end()) {\n            time++;\n            mp[key]->time = time;\n            return mp[key]->value;\n        }   \n        time++;\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(mp.size() >= cap) {\n            // handle duplicate keys\n            if(mp.find(key) != mp.end()) {\n                time++;\n                mp[key]->value = value;\n                mp[key]->time = time;\n                return;\n            }\n        \n            int mini = INT_MAX;\n            int minKey = INT_MAX;\n            for(auto &it : mp) {\n                if(it.second->time < mini) {\n                    mini = it.second->time;\n                    minKey = it.first;\n                }\n            }\n            mp.erase(minKey);\n        }\n        \n        time++;\n        LRUNode *temp = new LRUNode(value,time);\n        mp[key] = temp;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111100","title_slug":"lru-cache","has_notes":false}