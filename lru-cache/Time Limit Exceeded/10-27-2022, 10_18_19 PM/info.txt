{"id":831517803,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1666889299,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/831517803/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUNode {\n    public:\n    int key, value;\n    \n    LRUNode(int key, int value) {\n        this->key = key;\n        this->value = value;\n    }\n};\n\nclass LRUCache {\n    deque<LRUNode*> dq;\n    map<int, LRUNode*> mp;\n    int cap;\n    \npublic:\n    LRUCache(int capacity) {\n        cap = capacity;    \n    }\n    \n    int get(int key) {\n        if(mp.find(key) != mp.end()) {\n            LRUNode *temp = mp[key];\n            auto it = dq.begin();\n            for (; it != dq.end(); ++it) {\n                if((*it)->key == key) break;\n            }\n            dq.erase(it);\n            dq.push_front(temp);\n            return temp->value;\n        }\n        \n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(mp.find(key) != mp.end()) {\n            LRUNode *temp = mp[key];\n            auto it = dq.begin();\n            for (; it != dq.end(); ++it) {\n                if((*it)->key == key) break;\n            }\n            dq.erase(it);\n        }\n        else {\n            if(dq.size() == cap) {\n                LRUNode *temp = dq.back();\n                dq.pop_back();\n                mp.erase(temp->key);\n            }\n        } \n        \n        LRUNode *newEntry = new LRUNode(key, value);\n        dq.push_front(newEntry);\n        mp[newEntry->key] = newEntry;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111100","title_slug":"lru-cache","has_notes":false}