{"id":831759826,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1666921821,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/831759826/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\n    int capacity;\n    list<pair<int, int>> li;\n    unordered_map<int, list<pair<int, int>>::iterator> um; \n\npublic:\n    LRUCache(int capacity) : capacity{capacity} {}\n    \n    int get(int key) {\n        if (um.find(key) == um.end()) return -1;\n        li.splice(li.begin(), li, um[key]);\n        return um[key]->second;\n    }\n    \n    void put(int key, int value) {\n        if (get(key) != -1) {\n            um[key]->second = value;\n            return;\n        }\n        \n        if (um.size() == capacity) {\n            int delKey = li.back().first;\n            li.pop_back();\n            um.erase(delKey);\n        }\n        \n        li.emplace_front(key, value);\n        um[key] = li.begin();\n    }\n};","compare_result":"1111111111111111111100","title_slug":"lru-cache","has_notes":false}