{"id":911193555,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678242330,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/911193555/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"35.1 MB","code":"class Solution {\npublic:\n    bool isValid(vector<int> piles, int h, int bph) {\n        long long time = 0;\n\n        // idea here is to find the time taken to finish each pile \n        // by dividing current element by the number of bananas that can be eaten per hour(bph)\n        // if any remainder is obtained on division, that means either pile is less than \n        // bph or if it is more, bph does not evenly divide it. in this case, we increment the\n        // answer by 1 so that the count for the remaining bananas to be eaten is considered.\n\n        for(int pile: piles) {\n            if(pile % bph > 0) time++;\n            time += pile/bph;\n        }\n\n        // if the answer comes out to be less than or equal to the given time, return true\n        return time <= h;\n    }\n    \n\n    int minEatingSpeed(vector<int>& piles, int h) {\n        int low = 1;\n        int high = 1e9;\n        int ans = 0;\n\n        while(low <= high) {\n            int mid = (low + high) / 2;\n            if(isValid(piles,h,mid)) {\n                ans = mid;\n                // to get the minimum answer we have to move to the left side\n                // of the search space\n                high = mid-1;\n            }\n            else low = mid+1;\n        }\n\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false}