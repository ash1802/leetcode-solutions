{"id":958895268,"lang":"cpp","lang_name":"C++","time":"5 days, 6 hours","timestamp":1685266143,"status":10,"status_display":"Accepted","runtime":"1081 ms","url":"/submissions/detail/958895268/","is_pending":"Not Pending","title":"Maximum Strictly Increasing Cells in a Matrix","memory":"226.9 MB","code":"class Solution {\npublic:\n    int maxIncreasingCells(vector<vector<int>>& mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n\n        map<int, vector<pair<int,int>>> mp;\n        vector<int> row(n);\n        vector<int> col(m);\n        vector<vector<int>> dp(n, vector<int>(m,0));\n\n        for (int i=0;i<n;i++) {\n            for (int j=0;j<m;j++) {\n                mp[mat[i][j]].push_back({i,j});\n            }\n        }\n\n        for (auto i : mp){\n            for (auto& [x,y]: i.second) dp[x][y] = 1 + max(row[x], col[y]);\n            for (auto& [x,y]: i.second) {\n                row[x] = max(row[x], dp[x][y]);\n                col[y] = max(col[y], dp[x][y]);\n            }\n        }\n  \n        return *max_element(col.begin(),col.end());\n    }\n};","compare_resulttitle_slug":"maximum-strictly-increasing-cells-in-a-matrix","has_notes":false}