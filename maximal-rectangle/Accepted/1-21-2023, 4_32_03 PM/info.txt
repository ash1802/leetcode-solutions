{"id":882327247,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674298923,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/882327247/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"13.4 MB","code":"class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        if (matrix.empty() || matrix[0].empty()) {\n            return 0;\n        }\n        int cLen = matrix[0].size();    // column length\n        int rLen = matrix.size();       // row length\n        // height array\n        vector<int> h(cLen + 1);\n        h[cLen] = 0;\n        int max = 0;\n\n        for (int row = 0; row < rLen; row++) {\n            stack<int> s;\n            for (int i = 0; i < cLen + 1; i++) {\n                if (i < cLen) {\n                    if (matrix[row][i] == '1') {\n                        h[i] += 1;\n                    } else {\n                        h[i] = 0;\n                    }\n                }\n\n                if (s.empty() || h[s.top()] <= h[i]) {\n                    s.push(i);\n                } else {\n                    while (!s.empty() && h[i] < h[s.top()]) {\n                        int top = s.top();\n                        s.pop();\n                        int area = h[top] * (s.empty() ? i : (i - s.top() - 1));\n                        if (area > max) {\n                            max = area;\n                        }\n                    }\n                    s.push(i);\n                }\n            }\n        }\n        return max;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false}