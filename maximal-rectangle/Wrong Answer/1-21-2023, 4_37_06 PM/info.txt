{"id":882328963,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1674299226,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/882328963/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"N/A","code":"class Solution {\n    vector<int> nextSmallerElement(vector<int> arr, int n)\n{\n    stack<int> s;\n    s.push(-1);\n    vector<int> ans(n);\n\n    for (int i = n - 1; i >= 0; i--)\n    {\n        int curr = arr[i];\n        while (s.top() != -1 && arr[s.top()] >= curr)\n        {\n            s.pop();\n        }\n        ans[i] = s.top();\n        s.push(i);\n    }\n    return ans;\n}\n\n// function to find the index of the previous smaller element to the current element\nvector<int> prevSmallerElement(vector<int> arr, int n)\n{\n    stack<int> s;\n    s.push(-1);\n    vector<int> ans(n);\n\n    for (int i = 0; i < n; i++)\n    {\n        int curr = arr[i];\n        while (s.top() != -1 && arr[s.top()] >= curr)\n        {\n            s.pop();\n        }\n        ans[i] = s.top();\n        s.push(i);\n    }\n    return ans;\n}\n\n// function to find the largest rectangular area in a histogram\nint largestRectangleArea(vector<int> heights, int n)\n{\n    vector<int> next(n);\n    next = nextSmallerElement(heights, n);\n\n    vector<int> prev(n);\n    prev = prevSmallerElement(heights, n);\n\n    // global area variable for storing the answer\n    int area = INT_MIN;\n    for (int i = 0; i < n; i++)\n    {\n        int l = heights[i];\n\n        // EDGE CASE: if all elements are equal, we might get next as -1, which will make area as negative\n        // so set next[i] = n if it is -1 already\n        if (next[i] == -1)\n        {\n            next[i] = n;\n        }\n\n        // find breadth using the indices of the next smaller element and previous smaller element\n        int b = next[i] - prev[i] - 1;\n\n        // find the current area and update the global area\n        int newArea = l * b;\n        area = max(area, newArea);\n    }\n    return area;\n}\n\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        if (matrix.empty() || matrix[0].empty()) {\n            return 0;\n        }\n\n        // find row and column length\n        int cLen = matrix[0].size();    \n        int rLen = matrix.size();       \n        \n        // height array for calculation of largest area\n        vector<int> h(cLen + 1);\n\n        h[cLen] = 0;\n        int ans = INT_MIN;\n\n        for (int row = 0; row < rLen; row++) {\n            for (int i = 0; i < cLen + 1; i++) {\n                if (i < cLen) {\n                    // note that if the base itself is zero we cannot set the\n                    // height hence it is set to zero\n                    if (matrix[row][i] == '1') {\n                        h[i] += 1;\n                    } else {\n                        h[i] = 0;\n                    }\n                }\n\n                ans = max(ans, largestRectangleArea(h,h.size()));\n            }\n        }\n        \n        return ans;\n    }\n};\n","compare_result":"11111111011111111111111111110001111110100110110110111101111001100011100000","title_slug":"maximal-rectangle","has_notes":false}