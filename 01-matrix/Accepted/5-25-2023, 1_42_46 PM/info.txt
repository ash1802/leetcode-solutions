{"id":956950184,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1685002366,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/956950184/","is_pending":"Not Pending","title":"01 Matrix","memory":"34.5 MB","code":"class Solution {\npublic:\n    vector<vector<int>> updateMatrix(vector<vector<int>>& grid) {\n        int n = grid.size();\n\t    int m = grid[0].size();\n\t    queue<pair<pair<int,int>, int>> q;\n\t    vector<vector<int>> vis(n, vector<int>(m, 0));\n\t    vector<vector<int>> dist(n, vector<int>(m, 0));\n\t    \n\t    for(int i=0; i<n; i++) {\n\t        for(int j=0; j<m; j++) {\n\t            if(grid[i][j] == 0) {\n\t                q.push({{i,j}, 0});\n\t                vis[i][j] = 1;\n\t            }\n\t            \n\t            else vis[i][j] = 0;\n\t        }\n\t    }\n\t    \n\t    vector<pair<int, int>> dir{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n\t    \n\t    while(!q.empty()) {\n\t        int r = q.front().first.first;\n\t        int c = q.front().first.second;\n\t        int di = q.front().second;\n\t        q.pop();\n\t        \n\t        dist[r][c] = di;\n\t        for(auto d : dir) {\n\t            int newr = r + d.first;\n\t            int newc = c + d.second;\n\t            \n\t            if(newr >= 0 && newr < n && newc >= 0 && newc < m && !vis[newr][newc]) {\n\t                vis[newr][newc] = 1;\n\t                q.push({{newr, newc}, di+1});\n\t            }\n\t        }\n\t    }\n\t    \n\t    return dist;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false}