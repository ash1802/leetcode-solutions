{"id":928899379,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1680763550,"status":10,"status_display":"Accepted","runtime":"123 ms","url":"/submissions/detail/928899379/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock with Transaction Fee","memory":"55 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int> prices, int fee, int i, bool buy, vector<vector<int>>& dp) {\n        // base case\n        if(i >= prices.size()) return 0;\n\n        if(dp[i][buy] != -1) return dp[i][buy];\n\n        int profit = 0;\n        if(buy) {\n            profit = max(-prices[i] + solve(prices, fee, i+1, !buy, dp), solve(prices, fee, i+1, buy, dp));\n        }\n\n        else {\n            profit = max(-fee + prices[i] + solve(prices, fee, i+1, !buy, dp), solve(prices, fee, i+1, buy, dp));\n        }\n\n        return dp[i][buy] = profit;\n    }\n\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        // vector<vector<int>> dp(n, vector<int>(2, -1));\n        // return solve(prices, fee, 0, true, dp);\n\n        // tabulation solution here\n        // vector<vector<int>> dp(n+1, vector<int>(2, 0));\n        // dp[n][0] = dp[n][1] = 0;\n\n        // for(int i = n-1; i >=0; i--) {\n        //     for(int buy = 0; buy <= 1; buy++) {\n        //         if(buy == 1) {\n        //             dp[i][buy] = max(-prices[i] + dp[i+1][0], dp[i+1][1]);\n        //         }\n\n        //         else {\n        //             dp[i][buy] = max(-fee + prices[i] + dp[i+1][1], dp[i+1][0]);\n        //         }\n        //     }\n        // }\n\n        // return dp[0][1];\n\n        // space optimised solution here\n        vector<int> ahead(2,0), curr(2,0);\n        ahead[0] = ahead[1] = 0;\n\n        for(int i = n-1; i>=0; i--) {\n            for(int buy = 0; buy <= 1; buy++) {\n                if(buy == 1) {\n                    curr[buy] = max(-prices[i] + ahead[0], ahead[1]);\n                }\n\n                else {\n                    curr[buy] = max(-fee + prices[i] + ahead[1], ahead[0]);\n                }\n            }\n            ahead = curr;\n        }\n\n        return ahead[1];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-with-transaction-fee","has_notes":false}