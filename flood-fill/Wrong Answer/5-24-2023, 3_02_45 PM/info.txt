{"id":956350009,"lang":"cpp","lang_name":"C++","time":"1 week, 2 days","timestamp":1684920765,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/956350009/","is_pending":"Not Pending","title":"Flood Fill","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n        int n = image.size();\n        int m = image[0].size();\n        int src = image[sr][sc];\n\n        vector<vector<int>> vis(n, vector<int>(m, 0));\n        vector<pair<int,int>> dir({{-1,0}, {0,1}, {1,0}, {0,-1}});\n\n        queue<pair<int,int>> q;\n        q.push({sr,sc});\n\n        while(!q.empty()) { \n            auto node = q.front();\n            q.pop();\n\n            int r = node.first;\n            int c = node.second;\n\n            vis[r][c] = 1;\n            image[r][c] = color;\n\n            for(auto d : dir) {\n                int newr = r + d.first;\n                int newc = c + d.second;\n\n                if(newr >= 0 && newr < n && newc >= 0 && newc < n && image[newr][newc] == src && !vis[newr][newc]) {\n                    q.push({newr, newc});\n                    vis[newr][newc] = 1;\n                }\n            }\n        }\n\n        return image;\n    }\n};","compare_result":"1100000000011000101000100011100010000111111111101010011111111100100001111111111011100111111111001000011111101110111001111100110011000100011111101110011001111000110001111111111011100111111110001100011111111010111001111111100010000011101010101000000110001000111111111111111111111","title_slug":"flood-fill","has_notes":false}