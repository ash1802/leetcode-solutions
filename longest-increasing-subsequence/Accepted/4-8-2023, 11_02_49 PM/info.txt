{"id":930251471,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1680975169,"status":10,"status_display":"Accepted","runtime":"311 ms","url":"/submissions/detail/930251471/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"10.6 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int> nums, int i, int prev, vector<vector<int>>& dp) {\n        // base case\n        if(i == nums.size()) return 0;\n\n        if(dp[i][prev+1] != -1) return dp[i][prev+1];\n\n        int dontPick = solve(nums, i+1, prev, dp);\n        int pick = -1e9;\n        if(prev == -1 || nums[i] > nums[prev]) {\n            pick = 1 + solve(nums, i+1, i, dp);\n        }\n\n        return dp[i][prev+1] = max(pick, dontPick);\n    }\n\n    int lengthOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        int prev = -1;\n        // vector<vector<int>> dp(n, vector<int>(n+1, -1));\n        // return solve(nums, 0, prev, dp);\n\n        // tabulation solution here\n        // vector<vector<int>> dp(n+1,vector<int>(n+1,0));\n        // for(int ind = n-1;ind>=0;ind--) {\n        //     for(int prev = ind-1;prev>=-1;prev--) {      \n        //         int nottake = dp[ind+1][prev+1];\n        //         int take =0;\n        //         if(prev==-1 || nums[ind]>nums[prev]) {\n        //             take = 1+dp[ind+1][ind+1];\n        //         }\n        //         dp[ind][prev+1]=max(nottake,take);\n        //     }\n        // }\n        // return dp[0][0];\n\n        // space optimisation here\n        vector<int> dp(n,1);\n        int maxi=1;\n        for(int ind = 1;ind<n;ind++){\n            for(int prev =0;prev<ind;prev++){\n                if(nums[ind] > nums[prev]){\n                    dp[ind]=max(dp[ind],1+dp[prev]);\n                }\n             }\n            maxi = max(maxi,dp[ind]);\n        }\n        return maxi;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}