{"id":928905411,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1680764371,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/928905411/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\npublic:\n    int solve(vector<int> nums, int i, int prev, vector<vector<int>>& dp) {\n        // base case\n        if(i == nums.size()) return 0;\n\n        if(dp[i][prev+1] != -1) return dp[i][prev+1];\n\n        int dontPick = solve(nums, i+1, prev, dp);\n        int pick = -1e9;\n        if(prev == -1 || nums[i] > nums[prev]) {\n            pick = 1 + solve(nums, i+1, i, dp);\n        }\n\n        return dp[i][prev+1] = max(pick, dontPick);\n    }\n\n    int lengthOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        int prev = -1;\n        vector<vector<int>> dp(n, vector<int>(n+1, -1));\n        return solve(nums, 0, prev, dp);\n    }\n};","compare_result":"111111111111111111111100000000000000000000000000000000","title_slug":"longest-increasing-subsequence","has_notes":false}