{"id":879820214,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1673951501,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/879820214/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"11.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    int lenList(ListNode* head) {\n        int count = 0;\n        while(head != NULL) {\n            count++;\n            head = head->next;\n        }\n        return count;\n    }\n\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        // if no list then return null\n        if(head == NULL) return NULL;\n\n        // if length of the list is less than K, no need to reverse\n        if(lenList(head) < k) return head;\n\n        // reverse first K nodes using iterative logic\n        ListNode *next = NULL;\n        ListNode *curr = head;\n        ListNode *prev = NULL;\n        int count = 0;\n\n        while(count < k && curr != NULL) {\n            next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n            count++;\n        }\n        \n        // now if the start of next K nodes is not null, then call recursively\n        // and then point head's next to the remaining reversed part\n        if(next != NULL) {\n            head->next = reverseKGroup(next,k);    \n        }\n        \n        // return the new head of the reversed list\n        return prev;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group","has_notes":false}