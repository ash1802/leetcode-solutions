{"id":928895047,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1680762982,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/928895047/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock with Cooldown","memory":"11.9 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int> prices, int i, bool buy, vector<vector<int>>& dp) {\n        // base case\n        if(i >= prices.size()) return 0;\n\n        if(dp[i][buy] != -1) return dp[i][buy];\n\n        int profit = 0;\n        if(buy) {\n            profit = max(-prices[i] + solve(prices, i+1, !buy, dp), solve(prices, i+1, buy, dp));\n        }\n\n        else {\n            profit = max(prices[i] + solve(prices, i+2, !buy, dp), solve(prices, i+1, buy, dp));\n        }\n\n        return dp[i][buy] = profit;\n    }\n\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        // vector<vector<int>> dp(n, vector<int>(2, -1));\n        // return solve(prices, 0, true, dp);\n\n        // tabulation solution here\n        vector<vector<int>> dp(n+2, vector<int>(2, 0));\n\n        for(int i=n-1; i>=0; i--) {\n            for(int buy = 0; buy <= 1; buy++) {\n                int profit = 0;\n                if(buy) {\n                    profit = max(-prices[i] + dp[i+1][0], dp[i+1][1]);\n                }\n\n                else {\n                    profit = max(prices[i] + dp[i+2][1], dp[i+1][0]);\n                }\n\n                dp[i][buy] = profit;\n            }\n        }\n\n        return dp[0][1];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-with-cooldown","has_notes":false}