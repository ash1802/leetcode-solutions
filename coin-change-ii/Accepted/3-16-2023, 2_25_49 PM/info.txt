{"id":916157405,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678956949,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/916157405/","is_pending":"Not Pending","title":"Coin Change II","memory":"18.4 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int> coins, int amt, int i, vector<vector<int>>& dp) {\n        // base case\n        if(i == 0) return amt % coins[0] == 0;\n        \n        if(dp[i][amt] != -1) return dp[i][amt];\n\n        int dontPick = solve(coins, amt, i-1, dp);\n        int pick = 0;\n        if(coins[i] <= amt) pick = solve(coins, amt-coins[i], i, dp);\n        return dp[i][amt] = pick + dontPick;\n    }\n\n    int change(int amount, vector<int>& coins) {\n        int n = coins.size();\n        // vector<vector<int>> dp(n, vector<int>(amount+1, -1));\n        // return solve(coins, amount, n-1, dp);\n\n        // tabulation solution here\n        vector<vector<int>> dp(n, vector<int>(amount+1, 0));\n        for(int k=0; k<=amount; k++) {\n            if(k % coins[0] == 0) dp[0][k] = 1;\n        }\n\n        for(int i=1; i<n; i++) {\n            for(int target = 0; target <= amount; target++) {\n                int dontPick = dp[i-1][target];\n                int pick = 0;\n                if(coins[i] <= target) pick = dp[i][target-coins[i]];\n                dp[i][target] = pick + dontPick;\n            }\n        }\n\n        return dp[n-1][amount];\n    }\n};","compare_result":"1111111111111111111111111111","title_slug":"coin-change-ii","has_notes":false}