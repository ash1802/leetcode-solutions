{"id":916134040,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678953177,"status":10,"status_display":"Accepted","runtime":"110 ms","url":"/submissions/detail/916134040/","is_pending":"Not Pending","title":"Coin Change","memory":"45.7 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int>& coins, int amount, int i, vector<vector<int>>& dp) {\n        // base case\n        if(i == 0) {\n            if(amount % coins[0] == 0) return amount / coins[i];\n            else return 1e9;\n        }\n\n        if(dp[i][amount] != -1) return dp[i][amount];\n\n        // pick and not pick strategy applied here with a little modification\n        int dontPick = solve(coins, amount, i-1, dp);\n        int pick = 1e9;\n        if(coins[i] <= amount) pick = 1 + solve(coins, amount - coins[i], i, dp);\n\n        return dp[i][amount] = min(dontPick, pick);\n    }\n\n    int coinChange(vector<int>& coins, int amount) {\n        int n = coins.size();\n        vector<vector<int>> dp(n, vector<int>(amount+1, -1));\n        int ans = solve(coins, amount, n-1, dp);\n        if(ans >= 1e9) return -1;\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-change","has_notes":false}