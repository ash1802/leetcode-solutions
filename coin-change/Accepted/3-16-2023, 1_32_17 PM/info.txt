{"id":916137396,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678953737,"status":10,"status_display":"Accepted","runtime":"146 ms","url":"/submissions/detail/916137396/","is_pending":"Not Pending","title":"Coin Change","memory":"18.6 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    int solve(vector<int>& coins, int amount, int i, vector<vector<int>>& dp) {\n        // base case\n        if(i == 0) {\n            if(amount % coins[0] == 0) return amount / coins[i];\n            else return 1e9;\n        }\n\n        if(dp[i][amount] != -1) return dp[i][amount];\n\n        // pick and not pick strategy applied here with a little modification\n        int dontPick = solve(coins, amount, i-1, dp);\n        int pick = 1e9;\n        if(coins[i] <= amount) pick = 1 + solve(coins, amount - coins[i], i, dp);\n\n        return dp[i][amount] = min(dontPick, pick);\n    }\n\n    int coinChange(vector<int>& coins, int amount) {\n        int n = coins.size();\n        // vector<vector<int>> dp(n, vector<int>(amount+1, -1));\n        // int ans = solve(coins, amount, n-1, dp);\n        // if(ans >= 1e9) return -1;\n        // return ans;\n\n        // tabulation solution here\n        // vector<vector<int>> dp(n, vector<int>(amount+1, 0));\n\n        // for(int i=0; i<=amount; i++) {\n        //     if(i % coins[0] == 0) dp[0][i] = i / coins[0];\n        //     else dp[0][i] = 1e9;\n        // }\n\n        // for(int i=1; i<n; i++) {\n        //     for(int target = 0; target <= amount; target++) {\n        //         int dontPick = dp[i-1][target];\n        //         int pick = 1e9;\n        //         if(coins[i] <= target) pick = 1 + dp[i][target - coins[i]];\n        //         dp[i][target] = min(dontPick, pick);\n        //     }\n        // }\n\n        // int ans = dp[n-1][amount];\n        // if(ans >= 1e9) return -1;\n        // return ans;\n\n        // space optimised solution here\n        vector<int> prev(amount+1, 0);\n        vector<int> curr(amount+1, 0);\n\n        for(int i=0; i<=amount; i++) {\n            if(i % coins[0] == 0) prev[i] = i / coins[0];\n            else prev[i] = 1e9;\n        }\n\n        for(int i=1; i<n; i++) {\n            for(int target = 0; target <= amount; target++) {\n                int dontPick = prev[target];\n                int pick = 1e9;\n                if(coins[i] <= target) pick = 1 + curr[target - coins[i]];\n                curr[target] = min(dontPick, pick);\n            }\n            prev = curr;\n        }\n\n        int ans = prev[amount];\n        if(ans >= 1e9) return -1;\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-change","has_notes":false}