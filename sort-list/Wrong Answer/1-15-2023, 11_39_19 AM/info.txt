{"id":878436473,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1673762959,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/878436473/","is_pending":"Not Pending","title":"Sort List","memory":"N/A","code":"class Solution {\n    ListNode* mergeLists(ListNode *left, ListNode *right) {\n        ListNode *ptr = new ListNode(0);\n        ListNode *curr = ptr;\n        \n        while(left != NULL && right != NULL) {\n            if(left->val <= right->val) {\n                curr -> next = left;\n                left = left -> next;\n            }\n            else {\n                curr -> next = right;\n                right = right -> next;\n            }\n            curr = curr ->next;\n        }\n                \n        while(left != NULL) {\n            curr -> next = left;\n            left = left->next;\n        }\n        \n        while(right != NULL) {\n            curr -> next = right;\n            right = right ->next;\n        }      \n\n        return ptr->next;\n    }\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(head == NULL || head ->next == NULL) return head;        \n        \n        ListNode *middle = NULL;\n        ListNode *slow = head;\n        ListNode *fast = head;\n        \n        // find middle\n        while(fast !=  NULL && fast -> next != NULL)\n        {\n            middle = slow;\n            slow = slow->next;          \n            fast = fast ->next ->next;  \n        }   \n\n        // separate first and second halves\n        middle -> next = NULL;            \n        \n        ListNode* left = sortList(head);    //left half recursive call\n        ListNode* right = sortList(slow);    //right half recursive call\n        \n        return mergeLists(left, right);\n    }\n};","compare_result":"111111110000000000000000000000","title_slug":"sort-list","has_notes":false}