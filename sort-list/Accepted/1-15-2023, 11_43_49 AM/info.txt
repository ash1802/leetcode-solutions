{"id":878438417,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1673763229,"status":10,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/878438417/","is_pending":"Not Pending","title":"Sort List","memory":"50.9 MB","code":"\nclass Solution {\n    ListNode* mergeLists(ListNode* list1, ListNode* list2) {\n        ListNode dummyHead(0);\n        ListNode* ptr = &dummyHead;\n\n        while (list1 != NULL && list2 != NULL) {\n            if (list1->val < list2->val) {\n                ptr->next = list1;\n                list1 = list1->next;\n            } else {\n                ptr->next = list2;\n                list2 = list2->next;\n            }\n            ptr = ptr->next;\n        }\n\n        if(list1 != NULL) ptr->next = list1;\n        else ptr->next = list2;\n\n        return dummyHead.next;\n    }\n\n    ListNode* getMid(ListNode* head) {\n        ListNode* midPrev = NULL;\n        while (head && head->next) {\n            midPrev = (midPrev == NULL) ? head : midPrev->next;\n            head = head->next->next;\n        }\n        ListNode* mid = midPrev->next;\n        midPrev->next = NULL;\n        return mid;\n    }\n\npublic:\n    ListNode* sortList(ListNode* head) {\n        if (head == NULL || head->next == NULL) return head;\n\n        ListNode* mid = getMid(head);\n        ListNode* left = sortList(head);\n        ListNode* right = sortList(mid);\n        \n        return mergeLists(left, right);\n    }\n};\n","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false}