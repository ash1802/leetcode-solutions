{"id":961338197,"lang":"cpp","lang_name":"C++","time":"1 day, 13 hours","timestamp":1685588929,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/961338197/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"N/A","code":"class Solution {\npublic:\n    int bfs(vector<vector<int>>& grid, int r, int c) {\n        int n = grid.size();\n\n        queue<vector<int>> q;\n        vector<vector<int>> dir = {{-1, -1}, {-1, 0}, {-1, 1},{0, -1}, {0, 1}, {1, -1},  {1, 0},  {1, 1}};\n\n        grid[r][c] = 1;\n        q.push({r,c,1});\n\n        while(!q.empty()) { \n            auto node = q.front();\n            q.pop();\n\n            int r = node[0];\n            int c = node[1];\n            int dist = node[2];\n\n            if(r == n-1 && c == n-1) return dist;\n\n            for(auto d : dir) {\n                int newr = r + d[0];\n                int newc = c + d[1];\n\n                if(newr >= 0 && newr < n && newc >= 0 && newc < n & grid[newr][newc] == 0) {\n                    q.push({newr, newc, dist+1});\n                    grid[newr][newc] = 1;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        int n = grid.size();\n        if(grid[0][0] != 0 || grid[n-1][n-1] != 0) return -1;\n        return bfs(grid, 0, 0);\n    }\n};","compare_result":"11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"shortest-path-in-binary-matrix","has_notes":false}