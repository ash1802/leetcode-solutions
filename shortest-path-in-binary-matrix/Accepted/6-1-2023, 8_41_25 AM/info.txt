{"id":961339305,"lang":"cpp","lang_name":"C++","time":"1 day, 13 hours","timestamp":1685589085,"status":10,"status_display":"Accepted","runtime":"149 ms","url":"/submissions/detail/961339305/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"37 MB","code":"class Solution {\npublic:\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        int n = grid.size();\n        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) return -1;\n\n        queue<vector<int>> q;\n        q.push({0, 0, 1});\n        grid[0][0] = 1;\n\n        vector<vector<int>> dir = {{-1, -1},{-1, 0},{-1, 1},{0, -1},{0, 1},{1, -1},{1, 0},{1, 1}};\n\n        while(!q.empty()) {\n            auto node = q.front();\n            q.pop();\n            int row = node[0];\n            int col = node[1];\n            int dist = node[2];\n\n            if (row == n - 1 && col == n - 1) {\n                return dist;\n            }\n\n            for (const auto& d : dir) {\n                int newRow = row + d[0];\n                int newCol = col + d[1];\n\n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && grid[newRow][newCol] == 0) {\n                    grid[newRow][newCol] = 1;\n                    q.push({newRow, newCol, dist + 1});\n                }\n            }\n        }\n\n        return -1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false}