{"id":893061268,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1675741745,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/893061268/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"20.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* solve(vector<int> preorder, vector<int> inorder, int& index, int istart, int iend) {\n        // base case\n        if(index >= preorder.size() || istart > iend) return NULL;\n        int element = preorder[index++];\n        int pos = lower_bound(inorder.begin(), inorder.end(), element) - inorder.begin();\n        TreeNode* root = new TreeNode(element);\n        root->left = solve(preorder, inorder, index, istart, pos-1);\n        root->right = solve(preorder, inorder, index, pos+1, iend);\n        return root;\n    }\n\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int preOrderIndex = 0;\n        int n = preorder.size();\n        vector<int> inorder(preorder);\n        sort(inorder.begin(), inorder.end());\n        TreeNode* root = solve(preorder, inorder, preOrderIndex, 0, n-1);\n        return root;\n    }\n};\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false}