{"id":915764737,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678898620,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/915764737/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        if(root == NULL) return true;\n        if(!root->left && !root->right || root->left && !root->right) return true;\n        if(root->left && !root->right) return false;\n\n        bool left = isCompleteTree(root->left);\n        bool right = isCompleteTree(root->right);\n\n        return left && right && ((root->left && root->right) || (root->left));\n    }\n};","compare_result":"111111111100111111001101110111110011100111011001111010011111111101011001101111010001010010100101001010010100101001010100","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}