{"id":915779122,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678900059,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/915779122/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void traverse(TreeNode* root, vector<int>& tree, int& count) {\n        if(root == NULL) {\n            tree.push_back(-1);\n            return;\n        }\n\n        if(!root->left && !root->right) {\n            tree.push_back(root->val);\n            count++;\n            return;\n        }\n\n        tree.push_back(root->val);\n        count++;\n        traverse(root->left, tree, count);\n        traverse(root->right, tree, count);\n    }\n\n    bool isCompleteTree(TreeNode* root) {\n        vector<int> tree;\n        int count = 0;\n        traverse(root, tree, count);\n        \n        for(int i=0; i<count; i++) {\n            if(tree[i] == -1) return false;\n        }\n\n        return true;\n    }\n};","compare_result":"111111111111101111001111111110111111111001111111111111110110111111111111111111111101110011110111101111011111111111111100","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}