{"id":915780930,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678900219,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/915780930/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"10.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        vector<TreeNode*> bfs;\n        bfs.push_back(root);\n        int i = 0;\n        while (i < bfs.size() && bfs[i]) {\n            bfs.push_back(bfs[i]->left);\n            bfs.push_back(bfs[i]->right);\n            i++;\n        }\n        while (i < bfs.size() && !bfs[i])\n            i++;\n        return i == bfs.size();\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}