{"id":915788654,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678900965,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/915788654/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"10.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        vector<TreeNode*> tree;\n        tree.push_back(root);\n        int i = 0;\n\n        // this loop keeps running till the first NULL element is encountered\n        while (i < tree.size() && tree[i]) {\n            tree.push_back(tree[i]->left);\n            tree.push_back(tree[i]->right);\n            i++;\n        }\n\n        // this will never run if a tree is CBT\n        // this condition will fail if there is any element existing after NULL has occurred \n        // which means the tree is not a CBT\n        while (i < tree.size() && !tree[i])\n            i++;\n        \n        // this will be true only when CBT condition is true\n        return i == tree.size();\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}