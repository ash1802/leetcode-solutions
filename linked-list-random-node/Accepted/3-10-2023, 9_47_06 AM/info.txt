{"id":912456242,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1678421826,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/912456242/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"16.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    vector<int> nodes;\npublic:\n    Solution(ListNode* head) {\n        while(head != NULL) {\n            nodes.push_back(head->val);\n            head = head->next;\n        }\n    }\n    \n    int getRandom() {\n        int n = nodes.size();\n        int randomIndex = rand() % n;\n        return nodes[randomIndex];\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"11111111","title_slug":"linked-list-random-node","has_notes":false}