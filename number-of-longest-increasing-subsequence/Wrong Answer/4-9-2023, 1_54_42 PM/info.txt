{"id":930622089,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1681028682,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/930622089/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n,1);\n        vector<int> count(n, 1);\n        int maxi = -1;\n        for(int ind = 1; ind < n; ind++) {\n            for(int prev =0; prev < ind; prev++) {\n                if(nums[ind] > nums[prev] && dp[prev] + 1 > dp[ind]) {\n                    dp[ind] = 1 + dp[prev];\n                    count[ind] = count[prev];\n                }\n\n                else if(nums[ind] > nums[prev] && dp[prev] + 1 == dp[ind]) {\n                    count[ind] += count[prev];\n                }\n            }\n\n            maxi = max(maxi, dp[ind]);\n        }\n\n        int nos = 0;\n        for(int i=0; i<n; i++) {\n            if(dp[i] == maxi) nos += count[i];\n        }\n\n        return nos;\n    }\n};","compare_result":"1110011111111111111111111011011111111111111111111111111111111111111111111100111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false}