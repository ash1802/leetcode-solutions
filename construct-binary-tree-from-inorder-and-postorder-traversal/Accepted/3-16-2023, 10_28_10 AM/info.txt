{"id":916059475,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1678942690,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/916059475/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"270.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n        int findPos(vector<int> inorder, int ele) {\n        for(int i=0; i<inorder.size(); i++) {\n            if(inorder[i] == ele) return i;\n        }\n        return -1;\n    }\n\n    TreeNode* solve(vector<int> postorder, vector<int> inorder, int& index, int istart, int iend) {\n        // base case\n        if(index < 0 || istart > iend) return NULL;\n\n        int element = postorder[index--];\n        int pos = findPos(inorder,element);\n\n        TreeNode* root = new TreeNode(element);\n        root->right = solve(postorder, inorder, index, pos+1, iend);\n        root->left = solve(postorder, inorder, index, istart, pos-1);\n        return root;\n    }\npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int postOrderIndex = postorder.size()-1;\n        TreeNode* root = solve(postorder,inorder,postOrderIndex,0,inorder.size()-1);\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false}