{"id":899292720,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1676570656,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/899292720/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"27.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode* left;\n *     TreeNode* right;\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Codec {\npublic:\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string result;\n        serialize(root, result);\n        return result;\n    }\n    \n    void serialize(TreeNode* root, string& result) {\n        if (root == nullptr) return;\n        result += to_string(root->val) + \",\";\n        serialize(root->left, result);\n        serialize(root->right, result);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        if (data.empty()) return nullptr;\n        queue<string> q;\n        stringstream ss(data);\n        string s;\n        while (getline(ss, s, ',')) {\n            q.push(s);\n        }\n        return deserialize(q, INT_MIN, INT_MAX);\n    }\n    \n    TreeNode* deserialize(queue<string>& q, int lower, int upper) {\n        if (q.empty()) return nullptr;\n        int val = stoi(q.front());\n        if (val < lower || val > upper) return nullptr;\n        q.pop();\n        TreeNode* root = new TreeNode(val);\n        root->left = deserialize(q, lower, val);\n        root->right = deserialize(q, val, upper);\n        return root;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst","has_notes":false}