{"id":895697500,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1676088007,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/895697500/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n    \n    void inorder(TreeNode* root, string& ans) {\n        if(root == NULL) return;\n        inorder(root->left, ans);\n        string num = to_string(root->val);\n        for(char ch : num) ans.push_back(ch);\n        ans.push_back('$'); // separator\n        inorder(root->right, ans);\n    }\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string ans = \"\";\n        inorder(root, ans);\n        return ans;\n    }\n\n    vector<int> convertToArray(string data) {\n        if(data == \"\") return {};\n        vector<int> ans;\n        string num = \"\";\n        for(int i=0; i<data.size(); i++) {\n            if(data[i] == '$') {\n                ans.push_back(stoi(num));\n                num = \"\";\n            }\n            else num.push_back(data[i]);\n        }\n        return ans;\n    }\n    \n    TreeNode* constructBST(int s, int e, vector<int>& in) {\n        if(s > e) return NULL;\n        int mid = (s+e) / 2;\n        TreeNode* root = new TreeNode(in[mid]);\n        root->left = constructBST(s, mid-1, in);\n        root->right = constructBST(mid+1, e, in);\n        return root;\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        vector<int> in = convertToArray(data);\n        return constructBST(0, in.size()-1, in);\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec* ser = new Codec();\n// Codec* deser = new Codec();\n// string tree = ser->serialize(root);\n// TreeNode* ans = deser->deserialize(tree);\n// return ans;","compare_result":"11111000000000000000000000000000000000000000000000000000000000","title_slug":"serialize-and-deserialize-bst","has_notes":false}