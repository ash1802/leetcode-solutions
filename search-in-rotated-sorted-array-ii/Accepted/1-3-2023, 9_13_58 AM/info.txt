{"id":870155376,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1672717438,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/870155376/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array II","memory":"13.9 MB","code":"\t\t\t// \\U0001f609\\U0001f609\\U0001f609\\U0001f609Please upvote if it helps \\U0001f609\\U0001f609\\U0001f609\\U0001f609\nclass Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        int l = 0;\n        int r = nums.size() - 1;\n        \n        while(l <= r)\n        {\n            int mid = l + (r-l) / 2;\n            if (nums[mid] == target)\n                return true;\n\t\t\t// with duplicates we can have this contdition, just update left & right\n            if((nums[l] == nums[mid]) && (nums[r] == nums[mid]))\n            {\n                l++;\n                r--;\n            }\n\t\t\t// first half\n\t\t\t// first half is in order\n            else if(nums[l] <= nums[mid])\n            {\n\t\t\t\t// target is in first  half\n                if((nums[l] <= target) && (nums[mid] > target))\n                    r = mid - 1;\n                else\n                    l = mid + 1;\n            }\n\t\t\t// second half\n\t\t\t// second half is order\n\t\t\t// target is in second half\n            else\n            {\n                if((nums[mid] < target) && (nums[r]>= target))\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n        }\n        return false;\n    }\n\t// for github repository link go to my profile.\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array-ii","has_notes":false}