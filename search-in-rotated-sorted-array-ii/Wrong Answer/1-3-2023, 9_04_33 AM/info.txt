{"id":870150719,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1672716873,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/870150719/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array II","memory":"N/A","code":"class Solution {\npublic:\n    int findMinPos(vector<int> nums) {\n        int curr = nums[0];\n        int idx = 1;\n\n        while(idx < nums.size()-1) {\n            if(curr <= nums[idx]) idx++;\n            else break;\n        }\n\n        return idx;\n    }\n\n    bool search(vector<int>& nums, int target) {\n        int pivot = findMinPos(nums);\n        int n = nums.size();\n\n        if(n == 1) {\n            if(nums[n-1] == target) return true;\n            else return false;\n        } \n\n        int low, high;\n\n        if(target >= nums[pivot] && target < nums[n-1]) {\n            low = pivot; high = n-1;\n        }\n\n        else {\n            low = 0; high = pivot;\n        }\n\n        while(low <= high) {\n            int mid = low + (high-low)/2;\n            if(nums[mid] == target) return true;\n            else if(nums[mid] > target) high = mid-1;\n            else low = mid+1;\n        }\n\n        return false;\n    }\n};","compare_result":"1111110101111111111011111111111111111101111111111101111111101111111111111111111011111111111111111111101101111101111111111111111111111111111100001111011110111110111111111111111111111111111110111111111111111111111111111110111111011111111111111101011011101110110111111111111110111111","title_slug":"search-in-rotated-sorted-array-ii","has_notes":false}