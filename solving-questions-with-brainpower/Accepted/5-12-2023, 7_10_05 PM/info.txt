{"id":949028229,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1683898805,"status":10,"status_display":"Accepted","runtime":"415 ms","url":"/submissions/detail/949028229/","is_pending":"Not Pending","title":"Solving Questions With Brainpower","memory":"207.5 MB","code":"class Solution {\npublic:\n    // recursion + memoization solution here\n    long long solve(vector<vector<int>> questions, int i, vector<long long>& dp) {\n        if(i >= questions.size()) return 0;\n\n        if(dp[i] != -1) return dp[i];\n\n        int skip = 0 + solve(questions, i+1, dp);\n        int attempt = 0;\n        if(i < questions.size()) attempt = questions[i][0] + solve(questions, i + questions[i][1] + 1, dp);\n\n        return dp[i] = max(skip, attempt);\n    }\n\n    long long mostPoints(vector<vector<int>>& questions) {\n        int n = questions.size();\n        // vector<long long> dp(n, -1);\n        // return solve(questions, 0, dp);\n\n        /*\n        long long mostPoints(vector<vector<int>>& q) {\n            long long dp[200001] = {};\n            for (int i = q.size() - 1; i >= 0; --i)\n                dp[i] = max(q[i][0] + dp[q[i][1] + i + 1], dp[i + 1]);\n            return dp[0];\n        }\n        */\n\n        // tabulation solution here\n        vector<long long> dp(200001, 0);\n        for(int i=n-1; i>=0; i--) {\n            dp[i] = max(dp[i+1], questions[i][0] + dp[i + questions[i][1] + 1]);\n        }\n        return dp[0];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"solving-questions-with-brainpower","has_notes":false}